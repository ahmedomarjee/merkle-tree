package org.hashtrees.thrift.generated;

/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

/**
 * Contains hostname, and port no.
 * 
 * 
 */
public class ServerName implements
		org.apache.thrift.TBase<ServerName, ServerName._Fields>,
		java.io.Serializable, Cloneable {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"ServerName");

	private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"hostName", org.apache.thrift.protocol.TType.STRING, (short) 1);
	private static final org.apache.thrift.protocol.TField PORT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"portNo", org.apache.thrift.protocol.TType.I32, (short) 2);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new ServerNameStandardSchemeFactory());
		schemes.put(TupleScheme.class, new ServerNameTupleSchemeFactory());
	}

	public String hostName; // required
	public int portNo; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		HOST_NAME((short) 1, "hostName"), PORT_NO((short) 2, "portNo");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // HOST_NAME
				return HOST_NAME;
			case 2: // PORT_NO
				return PORT_NO;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId
						+ " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __PORTNO_ISSET_ID = 0;
	private BitSet __isset_bit_vector = new BitSet(1);
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.HOST_NAME,
				new org.apache.thrift.meta_data.FieldMetaData("hostName",
						org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PORT_NO,
				new org.apache.thrift.meta_data.FieldMetaData("portNo",
						org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.I32)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
				ServerName.class, metaDataMap);
	}

	public ServerName() {
	}

	public ServerName(String hostName, int portNo) {
		this();
		this.hostName = hostName;
		this.portNo = portNo;
		setPortNoIsSet(true);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ServerName(ServerName other) {
		__isset_bit_vector.clear();
		__isset_bit_vector.or(other.__isset_bit_vector);
		if (other.isSetHostName()) {
			this.hostName = other.hostName;
		}
		this.portNo = other.portNo;
	}

	public ServerName deepCopy() {
		return new ServerName(this);
	}

	@Override
	public void clear() {
		this.hostName = null;
		setPortNoIsSet(false);
		this.portNo = 0;
	}

	public String getHostName() {
		return this.hostName;
	}

	public ServerName setHostName(String hostName) {
		this.hostName = hostName;
		return this;
	}

	public void unsetHostName() {
		this.hostName = null;
	}

	/**
	 * Returns true if field hostName is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetHostName() {
		return this.hostName != null;
	}

	public void setHostNameIsSet(boolean value) {
		if (!value) {
			this.hostName = null;
		}
	}

	public int getPortNo() {
		return this.portNo;
	}

	public ServerName setPortNo(int portNo) {
		this.portNo = portNo;
		setPortNoIsSet(true);
		return this;
	}

	public void unsetPortNo() {
		__isset_bit_vector.clear(__PORTNO_ISSET_ID);
	}

	/**
	 * Returns true if field portNo is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPortNo() {
		return __isset_bit_vector.get(__PORTNO_ISSET_ID);
	}

	public void setPortNoIsSet(boolean value) {
		__isset_bit_vector.set(__PORTNO_ISSET_ID, value);
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case HOST_NAME:
			if (value == null) {
				unsetHostName();
			} else {
				setHostName((String) value);
			}
			break;

		case PORT_NO:
			if (value == null) {
				unsetPortNo();
			} else {
				setPortNo((Integer) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case HOST_NAME:
			return getHostName();

		case PORT_NO:
			return Integer.valueOf(getPortNo());

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case HOST_NAME:
			return isSetHostName();
		case PORT_NO:
			return isSetPortNo();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof ServerName)
			return this.equals((ServerName) that);
		return false;
	}

	public boolean equals(ServerName that) {
		if (that == null)
			return false;

		boolean this_present_hostName = true && this.isSetHostName();
		boolean that_present_hostName = true && that.isSetHostName();
		if (this_present_hostName || that_present_hostName) {
			if (!(this_present_hostName && that_present_hostName))
				return false;
			if (!this.hostName.equals(that.hostName))
				return false;
		}

		boolean this_present_portNo = true;
		boolean that_present_portNo = true;
		if (this_present_portNo || that_present_portNo) {
			if (!(this_present_portNo && that_present_portNo))
				return false;
			if (this.portNo != that.portNo)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		return 0;
	}

	public int compareTo(ServerName other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;
		ServerName typedOther = (ServerName) other;

		lastComparison = Boolean.valueOf(isSetHostName()).compareTo(
				typedOther.isSetHostName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetHostName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.hostName, typedOther.hostName);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetPortNo()).compareTo(
				typedOther.isSetPortNo());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPortNo()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.portNo, typedOther.portNo);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot)
			throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot)
			throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("ServerName(");
		boolean first = true;

		sb.append("hostName:");
		if (this.hostName == null) {
			sb.append("null");
		} else {
			sb.append(this.hostName);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("portNo:");
		sb.append(this.portNo);
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		if (hostName == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'hostName' was not present! Struct: "
							+ toString());
		}
		// alas, we cannot check 'portNo' because it's a primitive and you chose
		// the non-beans generator.
	}

	private void writeObject(java.io.ObjectOutputStream out)
			throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in)
			throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bit_vector = new BitSet(1);
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ServerNameStandardSchemeFactory implements
			SchemeFactory {
		public ServerNameStandardScheme getScheme() {
			return new ServerNameStandardScheme();
		}
	}

	private static class ServerNameStandardScheme extends
			StandardScheme<ServerName> {

		public void read(org.apache.thrift.protocol.TProtocol iprot,
				ServerName struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // HOST_NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.hostName = iprot.readString();
						struct.setHostNameIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 2: // PORT_NO
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.portNo = iprot.readI32();
						struct.setPortNoIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
							schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			if (!struct.isSetPortNo()) {
				throw new org.apache.thrift.protocol.TProtocolException(
						"Required field 'portNo' was not found in serialized data! Struct: "
								+ toString());
			}
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot,
				ServerName struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.hostName != null) {
				oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
				oprot.writeString(struct.hostName);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(PORT_NO_FIELD_DESC);
			oprot.writeI32(struct.portNo);
			oprot.writeFieldEnd();
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ServerNameTupleSchemeFactory implements SchemeFactory {
		public ServerNameTupleScheme getScheme() {
			return new ServerNameTupleScheme();
		}
	}

	private static class ServerNameTupleScheme extends TupleScheme<ServerName> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot,
				ServerName struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			oprot.writeString(struct.hostName);
			oprot.writeI32(struct.portNo);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot,
				ServerName struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			struct.hostName = iprot.readString();
			struct.setHostNameIsSet(true);
			struct.portNo = iprot.readI32();
			struct.setPortNoIsSet(true);
		}
	}

}
