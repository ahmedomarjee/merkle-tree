/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.hashtrees.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HashTreesSyncInterface {

  public interface Iface {

    /**
     * Adds the (key,value) pair to the store. Intended to be used
     * while synch operation.
     * 
     * @param keyValuePairs
     * 
     * @param keyValuePairs
     */
    public void sPut(Map<ByteBuffer,ByteBuffer> keyValuePairs) throws org.apache.thrift.TException;

    /**
     * Deletes the keys from the store. While synching this function is used.
     * 
     * @param keys
     * 
     * @param keys
     */
    public void sRemove(List<ByteBuffer> keys) throws org.apache.thrift.TException;

    /**
     * Hash tree internal nodes store the hash of their children nodes. Given a
     * set of internal node ids, this returns the hashes that are stored on the
     * internal node.
     * 
     * @param treeId
     * @param nodeIds, internal tree node ids.
     * @return
     * 
     * @param treeId
     * @param nodeIds
     */
    public List<SegmentHash> getSegmentHashes(long treeId, List<Integer> nodeIds) throws org.apache.thrift.TException;

    /**
     * Returns the segment hash that is stored on the tree.
     * 
     * @param treeId, hash tree id.
     * @param nodeId, node id
     * @return
     * 
     * @param treeId
     * @param nodeId
     */
    public SegmentHash getSegmentHash(long treeId, int nodeId) throws org.apache.thrift.TException;

    /**
     * Hash tree data is stored on the leaf blocks. Given a segment id this
     * method is supposed to return (key,hash) pairs.
     * 
     * @param treeId
     * @param segId, id of the segment block.
     * @return
     * 
     * @param treeId
     * @param segId
     */
    public List<SegmentData> getSegment(long treeId, int segId) throws org.apache.thrift.TException;

    /**
     * Returns the (key,digest) for the given key in the given segment.
     * 
     * 
     * @param treeId
     * @param segId
     * @param key
     */
    public SegmentData getSegmentData(long treeId, int segId, ByteBuffer key) throws org.apache.thrift.TException;

    /**
     * Deletes tree nodes from the hash tree, and the corresponding segments.
     * 
     * 
     * @param treeId
     * @param nodeIds
     */
    public void deleteTreeNodes(long treeId, List<Integer> nodeIds) throws org.apache.thrift.TException;

    /**
     * Requests a rebuild of the hashtree.
     * 
     * 
     * @param request
     */
    public void submitRebuildRequest(RebuildHashTreeRequest request) throws org.apache.thrift.TException;

    /**
     * Submits the response to the server.
     * 
     * 
     * @param response
     */
    public void submitRebuildResponse(RebuildHashTreeResponse response) throws org.apache.thrift.TException;

    /**
     * Adds a server to sync list. Hashtree with treeId on the local server will only
     * be synched against this server.
     * 
     * 
     * @param sn
     * @param treeId
     */
    public void addServerNameAndTreeIdToSyncList(ServerName sn, long treeId) throws org.apache.thrift.TException;

    /**
     * Removes a server from sync list. From the next iteration, the remote
     * server will not be synched by the local server for only the given treeId.
     * 
     * 
     * @param sn
     * @param treeId
     */
    public void removeServerNameAndTreeIdFromSyncList(ServerName sn, long treeId) throws org.apache.thrift.TException;

    /**
     * Returns servers which are in sync list for the given treeId. The result will contain servers which are added through addServerToSyncList(treeId, sn) and
     * removeServerFromSyncList(sn).
     * 
     * 
     * 
     * @param treeId
     */
    public List<ServerName> getServerNameListFor(long treeId) throws org.apache.thrift.TException;

    /**
     * All local hashtrees will be synced against this server from the next iteration.
     * 
     * 
     * @param sn
     */
    public void addServerNameToSyncList(ServerName sn) throws org.apache.thrift.TException;

    public void removeServerNameFromSyncList(ServerName sn) throws org.apache.thrift.TException;

    public List<ServerName> getServerNameList() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void sPut(Map<ByteBuffer,ByteBuffer> keyValuePairs, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.sPut_call> resultHandler) throws org.apache.thrift.TException;

    public void sRemove(List<ByteBuffer> keys, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.sRemove_call> resultHandler) throws org.apache.thrift.TException;

    public void getSegmentHashes(long treeId, List<Integer> nodeIds, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSegmentHashes_call> resultHandler) throws org.apache.thrift.TException;

    public void getSegmentHash(long treeId, int nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSegmentHash_call> resultHandler) throws org.apache.thrift.TException;

    public void getSegment(long treeId, int segId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSegment_call> resultHandler) throws org.apache.thrift.TException;

    public void getSegmentData(long treeId, int segId, ByteBuffer key, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSegmentData_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteTreeNodes(long treeId, List<Integer> nodeIds, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteTreeNodes_call> resultHandler) throws org.apache.thrift.TException;

    public void submitRebuildRequest(RebuildHashTreeRequest request, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.submitRebuildRequest_call> resultHandler) throws org.apache.thrift.TException;

    public void submitRebuildResponse(RebuildHashTreeResponse response, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.submitRebuildResponse_call> resultHandler) throws org.apache.thrift.TException;

    public void addServerNameAndTreeIdToSyncList(ServerName sn, long treeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addServerNameAndTreeIdToSyncList_call> resultHandler) throws org.apache.thrift.TException;

    public void removeServerNameAndTreeIdFromSyncList(ServerName sn, long treeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.removeServerNameAndTreeIdFromSyncList_call> resultHandler) throws org.apache.thrift.TException;

    public void getServerNameListFor(long treeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getServerNameListFor_call> resultHandler) throws org.apache.thrift.TException;

    public void addServerNameToSyncList(ServerName sn, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addServerNameToSyncList_call> resultHandler) throws org.apache.thrift.TException;

    public void removeServerNameFromSyncList(ServerName sn, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.removeServerNameFromSyncList_call> resultHandler) throws org.apache.thrift.TException;

    public void getServerNameList(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getServerNameList_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void sPut(Map<ByteBuffer,ByteBuffer> keyValuePairs) throws org.apache.thrift.TException
    {
      send_sPut(keyValuePairs);
      recv_sPut();
    }

    public void send_sPut(Map<ByteBuffer,ByteBuffer> keyValuePairs) throws org.apache.thrift.TException
    {
      sPut_args args = new sPut_args();
      args.setKeyValuePairs(keyValuePairs);
      sendBase("sPut", args);
    }

    public void recv_sPut() throws org.apache.thrift.TException
    {
      sPut_result result = new sPut_result();
      receiveBase(result, "sPut");
      return;
    }

    public void sRemove(List<ByteBuffer> keys) throws org.apache.thrift.TException
    {
      send_sRemove(keys);
      recv_sRemove();
    }

    public void send_sRemove(List<ByteBuffer> keys) throws org.apache.thrift.TException
    {
      sRemove_args args = new sRemove_args();
      args.setKeys(keys);
      sendBase("sRemove", args);
    }

    public void recv_sRemove() throws org.apache.thrift.TException
    {
      sRemove_result result = new sRemove_result();
      receiveBase(result, "sRemove");
      return;
    }

    public List<SegmentHash> getSegmentHashes(long treeId, List<Integer> nodeIds) throws org.apache.thrift.TException
    {
      send_getSegmentHashes(treeId, nodeIds);
      return recv_getSegmentHashes();
    }

    public void send_getSegmentHashes(long treeId, List<Integer> nodeIds) throws org.apache.thrift.TException
    {
      getSegmentHashes_args args = new getSegmentHashes_args();
      args.setTreeId(treeId);
      args.setNodeIds(nodeIds);
      sendBase("getSegmentHashes", args);
    }

    public List<SegmentHash> recv_getSegmentHashes() throws org.apache.thrift.TException
    {
      getSegmentHashes_result result = new getSegmentHashes_result();
      receiveBase(result, "getSegmentHashes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSegmentHashes failed: unknown result");
    }

    public SegmentHash getSegmentHash(long treeId, int nodeId) throws org.apache.thrift.TException
    {
      send_getSegmentHash(treeId, nodeId);
      return recv_getSegmentHash();
    }

    public void send_getSegmentHash(long treeId, int nodeId) throws org.apache.thrift.TException
    {
      getSegmentHash_args args = new getSegmentHash_args();
      args.setTreeId(treeId);
      args.setNodeId(nodeId);
      sendBase("getSegmentHash", args);
    }

    public SegmentHash recv_getSegmentHash() throws org.apache.thrift.TException
    {
      getSegmentHash_result result = new getSegmentHash_result();
      receiveBase(result, "getSegmentHash");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSegmentHash failed: unknown result");
    }

    public List<SegmentData> getSegment(long treeId, int segId) throws org.apache.thrift.TException
    {
      send_getSegment(treeId, segId);
      return recv_getSegment();
    }

    public void send_getSegment(long treeId, int segId) throws org.apache.thrift.TException
    {
      getSegment_args args = new getSegment_args();
      args.setTreeId(treeId);
      args.setSegId(segId);
      sendBase("getSegment", args);
    }

    public List<SegmentData> recv_getSegment() throws org.apache.thrift.TException
    {
      getSegment_result result = new getSegment_result();
      receiveBase(result, "getSegment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSegment failed: unknown result");
    }

    public SegmentData getSegmentData(long treeId, int segId, ByteBuffer key) throws org.apache.thrift.TException
    {
      send_getSegmentData(treeId, segId, key);
      return recv_getSegmentData();
    }

    public void send_getSegmentData(long treeId, int segId, ByteBuffer key) throws org.apache.thrift.TException
    {
      getSegmentData_args args = new getSegmentData_args();
      args.setTreeId(treeId);
      args.setSegId(segId);
      args.setKey(key);
      sendBase("getSegmentData", args);
    }

    public SegmentData recv_getSegmentData() throws org.apache.thrift.TException
    {
      getSegmentData_result result = new getSegmentData_result();
      receiveBase(result, "getSegmentData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSegmentData failed: unknown result");
    }

    public void deleteTreeNodes(long treeId, List<Integer> nodeIds) throws org.apache.thrift.TException
    {
      send_deleteTreeNodes(treeId, nodeIds);
      recv_deleteTreeNodes();
    }

    public void send_deleteTreeNodes(long treeId, List<Integer> nodeIds) throws org.apache.thrift.TException
    {
      deleteTreeNodes_args args = new deleteTreeNodes_args();
      args.setTreeId(treeId);
      args.setNodeIds(nodeIds);
      sendBase("deleteTreeNodes", args);
    }

    public void recv_deleteTreeNodes() throws org.apache.thrift.TException
    {
      deleteTreeNodes_result result = new deleteTreeNodes_result();
      receiveBase(result, "deleteTreeNodes");
      return;
    }

    public void submitRebuildRequest(RebuildHashTreeRequest request) throws org.apache.thrift.TException
    {
      send_submitRebuildRequest(request);
      recv_submitRebuildRequest();
    }

    public void send_submitRebuildRequest(RebuildHashTreeRequest request) throws org.apache.thrift.TException
    {
      submitRebuildRequest_args args = new submitRebuildRequest_args();
      args.setRequest(request);
      sendBase("submitRebuildRequest", args);
    }

    public void recv_submitRebuildRequest() throws org.apache.thrift.TException
    {
      submitRebuildRequest_result result = new submitRebuildRequest_result();
      receiveBase(result, "submitRebuildRequest");
      return;
    }

    public void submitRebuildResponse(RebuildHashTreeResponse response) throws org.apache.thrift.TException
    {
      send_submitRebuildResponse(response);
      recv_submitRebuildResponse();
    }

    public void send_submitRebuildResponse(RebuildHashTreeResponse response) throws org.apache.thrift.TException
    {
      submitRebuildResponse_args args = new submitRebuildResponse_args();
      args.setResponse(response);
      sendBase("submitRebuildResponse", args);
    }

    public void recv_submitRebuildResponse() throws org.apache.thrift.TException
    {
      submitRebuildResponse_result result = new submitRebuildResponse_result();
      receiveBase(result, "submitRebuildResponse");
      return;
    }

    public void addServerNameAndTreeIdToSyncList(ServerName sn, long treeId) throws org.apache.thrift.TException
    {
      send_addServerNameAndTreeIdToSyncList(sn, treeId);
      recv_addServerNameAndTreeIdToSyncList();
    }

    public void send_addServerNameAndTreeIdToSyncList(ServerName sn, long treeId) throws org.apache.thrift.TException
    {
      addServerNameAndTreeIdToSyncList_args args = new addServerNameAndTreeIdToSyncList_args();
      args.setSn(sn);
      args.setTreeId(treeId);
      sendBase("addServerNameAndTreeIdToSyncList", args);
    }

    public void recv_addServerNameAndTreeIdToSyncList() throws org.apache.thrift.TException
    {
      addServerNameAndTreeIdToSyncList_result result = new addServerNameAndTreeIdToSyncList_result();
      receiveBase(result, "addServerNameAndTreeIdToSyncList");
      return;
    }

    public void removeServerNameAndTreeIdFromSyncList(ServerName sn, long treeId) throws org.apache.thrift.TException
    {
      send_removeServerNameAndTreeIdFromSyncList(sn, treeId);
      recv_removeServerNameAndTreeIdFromSyncList();
    }

    public void send_removeServerNameAndTreeIdFromSyncList(ServerName sn, long treeId) throws org.apache.thrift.TException
    {
      removeServerNameAndTreeIdFromSyncList_args args = new removeServerNameAndTreeIdFromSyncList_args();
      args.setSn(sn);
      args.setTreeId(treeId);
      sendBase("removeServerNameAndTreeIdFromSyncList", args);
    }

    public void recv_removeServerNameAndTreeIdFromSyncList() throws org.apache.thrift.TException
    {
      removeServerNameAndTreeIdFromSyncList_result result = new removeServerNameAndTreeIdFromSyncList_result();
      receiveBase(result, "removeServerNameAndTreeIdFromSyncList");
      return;
    }

    public List<ServerName> getServerNameListFor(long treeId) throws org.apache.thrift.TException
    {
      send_getServerNameListFor(treeId);
      return recv_getServerNameListFor();
    }

    public void send_getServerNameListFor(long treeId) throws org.apache.thrift.TException
    {
      getServerNameListFor_args args = new getServerNameListFor_args();
      args.setTreeId(treeId);
      sendBase("getServerNameListFor", args);
    }

    public List<ServerName> recv_getServerNameListFor() throws org.apache.thrift.TException
    {
      getServerNameListFor_result result = new getServerNameListFor_result();
      receiveBase(result, "getServerNameListFor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getServerNameListFor failed: unknown result");
    }

    public void addServerNameToSyncList(ServerName sn) throws org.apache.thrift.TException
    {
      send_addServerNameToSyncList(sn);
      recv_addServerNameToSyncList();
    }

    public void send_addServerNameToSyncList(ServerName sn) throws org.apache.thrift.TException
    {
      addServerNameToSyncList_args args = new addServerNameToSyncList_args();
      args.setSn(sn);
      sendBase("addServerNameToSyncList", args);
    }

    public void recv_addServerNameToSyncList() throws org.apache.thrift.TException
    {
      addServerNameToSyncList_result result = new addServerNameToSyncList_result();
      receiveBase(result, "addServerNameToSyncList");
      return;
    }

    public void removeServerNameFromSyncList(ServerName sn) throws org.apache.thrift.TException
    {
      send_removeServerNameFromSyncList(sn);
      recv_removeServerNameFromSyncList();
    }

    public void send_removeServerNameFromSyncList(ServerName sn) throws org.apache.thrift.TException
    {
      removeServerNameFromSyncList_args args = new removeServerNameFromSyncList_args();
      args.setSn(sn);
      sendBase("removeServerNameFromSyncList", args);
    }

    public void recv_removeServerNameFromSyncList() throws org.apache.thrift.TException
    {
      removeServerNameFromSyncList_result result = new removeServerNameFromSyncList_result();
      receiveBase(result, "removeServerNameFromSyncList");
      return;
    }

    public List<ServerName> getServerNameList() throws org.apache.thrift.TException
    {
      send_getServerNameList();
      return recv_getServerNameList();
    }

    public void send_getServerNameList() throws org.apache.thrift.TException
    {
      getServerNameList_args args = new getServerNameList_args();
      sendBase("getServerNameList", args);
    }

    public List<ServerName> recv_getServerNameList() throws org.apache.thrift.TException
    {
      getServerNameList_result result = new getServerNameList_result();
      receiveBase(result, "getServerNameList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getServerNameList failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void sPut(Map<ByteBuffer,ByteBuffer> keyValuePairs, org.apache.thrift.async.AsyncMethodCallback<sPut_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sPut_call method_call = new sPut_call(keyValuePairs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sPut_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<ByteBuffer,ByteBuffer> keyValuePairs;
      public sPut_call(Map<ByteBuffer,ByteBuffer> keyValuePairs, org.apache.thrift.async.AsyncMethodCallback<sPut_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.keyValuePairs = keyValuePairs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sPut", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sPut_args args = new sPut_args();
        args.setKeyValuePairs(keyValuePairs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_sPut();
      }
    }

    public void sRemove(List<ByteBuffer> keys, org.apache.thrift.async.AsyncMethodCallback<sRemove_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sRemove_call method_call = new sRemove_call(keys, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sRemove_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<ByteBuffer> keys;
      public sRemove_call(List<ByteBuffer> keys, org.apache.thrift.async.AsyncMethodCallback<sRemove_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.keys = keys;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sRemove", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sRemove_args args = new sRemove_args();
        args.setKeys(keys);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_sRemove();
      }
    }

    public void getSegmentHashes(long treeId, List<Integer> nodeIds, org.apache.thrift.async.AsyncMethodCallback<getSegmentHashes_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSegmentHashes_call method_call = new getSegmentHashes_call(treeId, nodeIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSegmentHashes_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long treeId;
      private List<Integer> nodeIds;
      public getSegmentHashes_call(long treeId, List<Integer> nodeIds, org.apache.thrift.async.AsyncMethodCallback<getSegmentHashes_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.treeId = treeId;
        this.nodeIds = nodeIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSegmentHashes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSegmentHashes_args args = new getSegmentHashes_args();
        args.setTreeId(treeId);
        args.setNodeIds(nodeIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SegmentHash> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSegmentHashes();
      }
    }

    public void getSegmentHash(long treeId, int nodeId, org.apache.thrift.async.AsyncMethodCallback<getSegmentHash_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSegmentHash_call method_call = new getSegmentHash_call(treeId, nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSegmentHash_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long treeId;
      private int nodeId;
      public getSegmentHash_call(long treeId, int nodeId, org.apache.thrift.async.AsyncMethodCallback<getSegmentHash_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.treeId = treeId;
        this.nodeId = nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSegmentHash", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSegmentHash_args args = new getSegmentHash_args();
        args.setTreeId(treeId);
        args.setNodeId(nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SegmentHash getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSegmentHash();
      }
    }

    public void getSegment(long treeId, int segId, org.apache.thrift.async.AsyncMethodCallback<getSegment_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSegment_call method_call = new getSegment_call(treeId, segId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSegment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long treeId;
      private int segId;
      public getSegment_call(long treeId, int segId, org.apache.thrift.async.AsyncMethodCallback<getSegment_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.treeId = treeId;
        this.segId = segId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSegment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSegment_args args = new getSegment_args();
        args.setTreeId(treeId);
        args.setSegId(segId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SegmentData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSegment();
      }
    }

    public void getSegmentData(long treeId, int segId, ByteBuffer key, org.apache.thrift.async.AsyncMethodCallback<getSegmentData_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSegmentData_call method_call = new getSegmentData_call(treeId, segId, key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSegmentData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long treeId;
      private int segId;
      private ByteBuffer key;
      public getSegmentData_call(long treeId, int segId, ByteBuffer key, org.apache.thrift.async.AsyncMethodCallback<getSegmentData_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.treeId = treeId;
        this.segId = segId;
        this.key = key;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSegmentData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSegmentData_args args = new getSegmentData_args();
        args.setTreeId(treeId);
        args.setSegId(segId);
        args.setKey(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SegmentData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSegmentData();
      }
    }

    public void deleteTreeNodes(long treeId, List<Integer> nodeIds, org.apache.thrift.async.AsyncMethodCallback<deleteTreeNodes_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteTreeNodes_call method_call = new deleteTreeNodes_call(treeId, nodeIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteTreeNodes_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long treeId;
      private List<Integer> nodeIds;
      public deleteTreeNodes_call(long treeId, List<Integer> nodeIds, org.apache.thrift.async.AsyncMethodCallback<deleteTreeNodes_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.treeId = treeId;
        this.nodeIds = nodeIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteTreeNodes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteTreeNodes_args args = new deleteTreeNodes_args();
        args.setTreeId(treeId);
        args.setNodeIds(nodeIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteTreeNodes();
      }
    }

    public void submitRebuildRequest(RebuildHashTreeRequest request, org.apache.thrift.async.AsyncMethodCallback<submitRebuildRequest_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      submitRebuildRequest_call method_call = new submitRebuildRequest_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class submitRebuildRequest_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RebuildHashTreeRequest request;
      public submitRebuildRequest_call(RebuildHashTreeRequest request, org.apache.thrift.async.AsyncMethodCallback<submitRebuildRequest_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("submitRebuildRequest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        submitRebuildRequest_args args = new submitRebuildRequest_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_submitRebuildRequest();
      }
    }

    public void submitRebuildResponse(RebuildHashTreeResponse response, org.apache.thrift.async.AsyncMethodCallback<submitRebuildResponse_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      submitRebuildResponse_call method_call = new submitRebuildResponse_call(response, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class submitRebuildResponse_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RebuildHashTreeResponse response;
      public submitRebuildResponse_call(RebuildHashTreeResponse response, org.apache.thrift.async.AsyncMethodCallback<submitRebuildResponse_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.response = response;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("submitRebuildResponse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        submitRebuildResponse_args args = new submitRebuildResponse_args();
        args.setResponse(response);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_submitRebuildResponse();
      }
    }

    public void addServerNameAndTreeIdToSyncList(ServerName sn, long treeId, org.apache.thrift.async.AsyncMethodCallback<addServerNameAndTreeIdToSyncList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addServerNameAndTreeIdToSyncList_call method_call = new addServerNameAndTreeIdToSyncList_call(sn, treeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addServerNameAndTreeIdToSyncList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ServerName sn;
      private long treeId;
      public addServerNameAndTreeIdToSyncList_call(ServerName sn, long treeId, org.apache.thrift.async.AsyncMethodCallback<addServerNameAndTreeIdToSyncList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sn = sn;
        this.treeId = treeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addServerNameAndTreeIdToSyncList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addServerNameAndTreeIdToSyncList_args args = new addServerNameAndTreeIdToSyncList_args();
        args.setSn(sn);
        args.setTreeId(treeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addServerNameAndTreeIdToSyncList();
      }
    }

    public void removeServerNameAndTreeIdFromSyncList(ServerName sn, long treeId, org.apache.thrift.async.AsyncMethodCallback<removeServerNameAndTreeIdFromSyncList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeServerNameAndTreeIdFromSyncList_call method_call = new removeServerNameAndTreeIdFromSyncList_call(sn, treeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeServerNameAndTreeIdFromSyncList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ServerName sn;
      private long treeId;
      public removeServerNameAndTreeIdFromSyncList_call(ServerName sn, long treeId, org.apache.thrift.async.AsyncMethodCallback<removeServerNameAndTreeIdFromSyncList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sn = sn;
        this.treeId = treeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeServerNameAndTreeIdFromSyncList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeServerNameAndTreeIdFromSyncList_args args = new removeServerNameAndTreeIdFromSyncList_args();
        args.setSn(sn);
        args.setTreeId(treeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeServerNameAndTreeIdFromSyncList();
      }
    }

    public void getServerNameListFor(long treeId, org.apache.thrift.async.AsyncMethodCallback<getServerNameListFor_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getServerNameListFor_call method_call = new getServerNameListFor_call(treeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getServerNameListFor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long treeId;
      public getServerNameListFor_call(long treeId, org.apache.thrift.async.AsyncMethodCallback<getServerNameListFor_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.treeId = treeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getServerNameListFor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getServerNameListFor_args args = new getServerNameListFor_args();
        args.setTreeId(treeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ServerName> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getServerNameListFor();
      }
    }

    public void addServerNameToSyncList(ServerName sn, org.apache.thrift.async.AsyncMethodCallback<addServerNameToSyncList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addServerNameToSyncList_call method_call = new addServerNameToSyncList_call(sn, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addServerNameToSyncList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ServerName sn;
      public addServerNameToSyncList_call(ServerName sn, org.apache.thrift.async.AsyncMethodCallback<addServerNameToSyncList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sn = sn;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addServerNameToSyncList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addServerNameToSyncList_args args = new addServerNameToSyncList_args();
        args.setSn(sn);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addServerNameToSyncList();
      }
    }

    public void removeServerNameFromSyncList(ServerName sn, org.apache.thrift.async.AsyncMethodCallback<removeServerNameFromSyncList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeServerNameFromSyncList_call method_call = new removeServerNameFromSyncList_call(sn, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeServerNameFromSyncList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ServerName sn;
      public removeServerNameFromSyncList_call(ServerName sn, org.apache.thrift.async.AsyncMethodCallback<removeServerNameFromSyncList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sn = sn;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeServerNameFromSyncList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeServerNameFromSyncList_args args = new removeServerNameFromSyncList_args();
        args.setSn(sn);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeServerNameFromSyncList();
      }
    }

    public void getServerNameList(org.apache.thrift.async.AsyncMethodCallback<getServerNameList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getServerNameList_call method_call = new getServerNameList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getServerNameList_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getServerNameList_call(org.apache.thrift.async.AsyncMethodCallback<getServerNameList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getServerNameList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getServerNameList_args args = new getServerNameList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ServerName> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getServerNameList();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("sPut", new sPut());
      processMap.put("sRemove", new sRemove());
      processMap.put("getSegmentHashes", new getSegmentHashes());
      processMap.put("getSegmentHash", new getSegmentHash());
      processMap.put("getSegment", new getSegment());
      processMap.put("getSegmentData", new getSegmentData());
      processMap.put("deleteTreeNodes", new deleteTreeNodes());
      processMap.put("submitRebuildRequest", new submitRebuildRequest());
      processMap.put("submitRebuildResponse", new submitRebuildResponse());
      processMap.put("addServerNameAndTreeIdToSyncList", new addServerNameAndTreeIdToSyncList());
      processMap.put("removeServerNameAndTreeIdFromSyncList", new removeServerNameAndTreeIdFromSyncList());
      processMap.put("getServerNameListFor", new getServerNameListFor());
      processMap.put("addServerNameToSyncList", new addServerNameToSyncList());
      processMap.put("removeServerNameFromSyncList", new removeServerNameFromSyncList());
      processMap.put("getServerNameList", new getServerNameList());
      return processMap;
    }

    private static class sPut<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sPut_args> {
      public sPut() {
        super("sPut");
      }

      protected sPut_args getEmptyArgsInstance() {
        return new sPut_args();
      }

      protected sPut_result getResult(I iface, sPut_args args) throws org.apache.thrift.TException {
        sPut_result result = new sPut_result();
        iface.sPut(args.keyValuePairs);
        return result;
      }
    }

    private static class sRemove<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sRemove_args> {
      public sRemove() {
        super("sRemove");
      }

      protected sRemove_args getEmptyArgsInstance() {
        return new sRemove_args();
      }

      protected sRemove_result getResult(I iface, sRemove_args args) throws org.apache.thrift.TException {
        sRemove_result result = new sRemove_result();
        iface.sRemove(args.keys);
        return result;
      }
    }

    private static class getSegmentHashes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSegmentHashes_args> {
      public getSegmentHashes() {
        super("getSegmentHashes");
      }

      protected getSegmentHashes_args getEmptyArgsInstance() {
        return new getSegmentHashes_args();
      }

      protected getSegmentHashes_result getResult(I iface, getSegmentHashes_args args) throws org.apache.thrift.TException {
        getSegmentHashes_result result = new getSegmentHashes_result();
        result.success = iface.getSegmentHashes(args.treeId, args.nodeIds);
        return result;
      }
    }

    private static class getSegmentHash<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSegmentHash_args> {
      public getSegmentHash() {
        super("getSegmentHash");
      }

      protected getSegmentHash_args getEmptyArgsInstance() {
        return new getSegmentHash_args();
      }

      protected getSegmentHash_result getResult(I iface, getSegmentHash_args args) throws org.apache.thrift.TException {
        getSegmentHash_result result = new getSegmentHash_result();
        result.success = iface.getSegmentHash(args.treeId, args.nodeId);
        return result;
      }
    }

    private static class getSegment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSegment_args> {
      public getSegment() {
        super("getSegment");
      }

      protected getSegment_args getEmptyArgsInstance() {
        return new getSegment_args();
      }

      protected getSegment_result getResult(I iface, getSegment_args args) throws org.apache.thrift.TException {
        getSegment_result result = new getSegment_result();
        result.success = iface.getSegment(args.treeId, args.segId);
        return result;
      }
    }

    private static class getSegmentData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSegmentData_args> {
      public getSegmentData() {
        super("getSegmentData");
      }

      protected getSegmentData_args getEmptyArgsInstance() {
        return new getSegmentData_args();
      }

      protected getSegmentData_result getResult(I iface, getSegmentData_args args) throws org.apache.thrift.TException {
        getSegmentData_result result = new getSegmentData_result();
        result.success = iface.getSegmentData(args.treeId, args.segId, args.key);
        return result;
      }
    }

    private static class deleteTreeNodes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteTreeNodes_args> {
      public deleteTreeNodes() {
        super("deleteTreeNodes");
      }

      protected deleteTreeNodes_args getEmptyArgsInstance() {
        return new deleteTreeNodes_args();
      }

      protected deleteTreeNodes_result getResult(I iface, deleteTreeNodes_args args) throws org.apache.thrift.TException {
        deleteTreeNodes_result result = new deleteTreeNodes_result();
        iface.deleteTreeNodes(args.treeId, args.nodeIds);
        return result;
      }
    }

    private static class submitRebuildRequest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, submitRebuildRequest_args> {
      public submitRebuildRequest() {
        super("submitRebuildRequest");
      }

      protected submitRebuildRequest_args getEmptyArgsInstance() {
        return new submitRebuildRequest_args();
      }

      protected submitRebuildRequest_result getResult(I iface, submitRebuildRequest_args args) throws org.apache.thrift.TException {
        submitRebuildRequest_result result = new submitRebuildRequest_result();
        iface.submitRebuildRequest(args.request);
        return result;
      }
    }

    private static class submitRebuildResponse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, submitRebuildResponse_args> {
      public submitRebuildResponse() {
        super("submitRebuildResponse");
      }

      protected submitRebuildResponse_args getEmptyArgsInstance() {
        return new submitRebuildResponse_args();
      }

      protected submitRebuildResponse_result getResult(I iface, submitRebuildResponse_args args) throws org.apache.thrift.TException {
        submitRebuildResponse_result result = new submitRebuildResponse_result();
        iface.submitRebuildResponse(args.response);
        return result;
      }
    }

    private static class addServerNameAndTreeIdToSyncList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addServerNameAndTreeIdToSyncList_args> {
      public addServerNameAndTreeIdToSyncList() {
        super("addServerNameAndTreeIdToSyncList");
      }

      protected addServerNameAndTreeIdToSyncList_args getEmptyArgsInstance() {
        return new addServerNameAndTreeIdToSyncList_args();
      }

      protected addServerNameAndTreeIdToSyncList_result getResult(I iface, addServerNameAndTreeIdToSyncList_args args) throws org.apache.thrift.TException {
        addServerNameAndTreeIdToSyncList_result result = new addServerNameAndTreeIdToSyncList_result();
        iface.addServerNameAndTreeIdToSyncList(args.sn, args.treeId);
        return result;
      }
    }

    private static class removeServerNameAndTreeIdFromSyncList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeServerNameAndTreeIdFromSyncList_args> {
      public removeServerNameAndTreeIdFromSyncList() {
        super("removeServerNameAndTreeIdFromSyncList");
      }

      protected removeServerNameAndTreeIdFromSyncList_args getEmptyArgsInstance() {
        return new removeServerNameAndTreeIdFromSyncList_args();
      }

      protected removeServerNameAndTreeIdFromSyncList_result getResult(I iface, removeServerNameAndTreeIdFromSyncList_args args) throws org.apache.thrift.TException {
        removeServerNameAndTreeIdFromSyncList_result result = new removeServerNameAndTreeIdFromSyncList_result();
        iface.removeServerNameAndTreeIdFromSyncList(args.sn, args.treeId);
        return result;
      }
    }

    private static class getServerNameListFor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getServerNameListFor_args> {
      public getServerNameListFor() {
        super("getServerNameListFor");
      }

      protected getServerNameListFor_args getEmptyArgsInstance() {
        return new getServerNameListFor_args();
      }

      protected getServerNameListFor_result getResult(I iface, getServerNameListFor_args args) throws org.apache.thrift.TException {
        getServerNameListFor_result result = new getServerNameListFor_result();
        result.success = iface.getServerNameListFor(args.treeId);
        return result;
      }
    }

    private static class addServerNameToSyncList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addServerNameToSyncList_args> {
      public addServerNameToSyncList() {
        super("addServerNameToSyncList");
      }

      protected addServerNameToSyncList_args getEmptyArgsInstance() {
        return new addServerNameToSyncList_args();
      }

      protected addServerNameToSyncList_result getResult(I iface, addServerNameToSyncList_args args) throws org.apache.thrift.TException {
        addServerNameToSyncList_result result = new addServerNameToSyncList_result();
        iface.addServerNameToSyncList(args.sn);
        return result;
      }
    }

    private static class removeServerNameFromSyncList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeServerNameFromSyncList_args> {
      public removeServerNameFromSyncList() {
        super("removeServerNameFromSyncList");
      }

      protected removeServerNameFromSyncList_args getEmptyArgsInstance() {
        return new removeServerNameFromSyncList_args();
      }

      protected removeServerNameFromSyncList_result getResult(I iface, removeServerNameFromSyncList_args args) throws org.apache.thrift.TException {
        removeServerNameFromSyncList_result result = new removeServerNameFromSyncList_result();
        iface.removeServerNameFromSyncList(args.sn);
        return result;
      }
    }

    private static class getServerNameList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getServerNameList_args> {
      public getServerNameList() {
        super("getServerNameList");
      }

      protected getServerNameList_args getEmptyArgsInstance() {
        return new getServerNameList_args();
      }

      protected getServerNameList_result getResult(I iface, getServerNameList_args args) throws org.apache.thrift.TException {
        getServerNameList_result result = new getServerNameList_result();
        result.success = iface.getServerNameList();
        return result;
      }
    }

  }

  public static class sPut_args implements org.apache.thrift.TBase<sPut_args, sPut_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sPut_args");

    private static final org.apache.thrift.protocol.TField KEY_VALUE_PAIRS_FIELD_DESC = new org.apache.thrift.protocol.TField("keyValuePairs", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sPut_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sPut_argsTupleSchemeFactory());
    }

    public Map<ByteBuffer,ByteBuffer> keyValuePairs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY_VALUE_PAIRS((short)1, "keyValuePairs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY_VALUE_PAIRS
            return KEY_VALUE_PAIRS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY_VALUE_PAIRS, new org.apache.thrift.meta_data.FieldMetaData("keyValuePairs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sPut_args.class, metaDataMap);
    }

    public sPut_args() {
    }

    public sPut_args(
      Map<ByteBuffer,ByteBuffer> keyValuePairs)
    {
      this();
      this.keyValuePairs = keyValuePairs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sPut_args(sPut_args other) {
      if (other.isSetKeyValuePairs()) {
        Map<ByteBuffer,ByteBuffer> __this__keyValuePairs = new HashMap<ByteBuffer,ByteBuffer>();
        for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.keyValuePairs.entrySet()) {

          ByteBuffer other_element_key = other_element.getKey();
          ByteBuffer other_element_value = other_element.getValue();

          ByteBuffer __this__keyValuePairs_copy_key = org.apache.thrift.TBaseHelper.copyBinary(other_element_key);
;

          ByteBuffer __this__keyValuePairs_copy_value = org.apache.thrift.TBaseHelper.copyBinary(other_element_value);
;

          __this__keyValuePairs.put(__this__keyValuePairs_copy_key, __this__keyValuePairs_copy_value);
        }
        this.keyValuePairs = __this__keyValuePairs;
      }
    }

    public sPut_args deepCopy() {
      return new sPut_args(this);
    }

    @Override
    public void clear() {
      this.keyValuePairs = null;
    }

    public int getKeyValuePairsSize() {
      return (this.keyValuePairs == null) ? 0 : this.keyValuePairs.size();
    }

    public void putToKeyValuePairs(ByteBuffer key, ByteBuffer val) {
      if (this.keyValuePairs == null) {
        this.keyValuePairs = new HashMap<ByteBuffer,ByteBuffer>();
      }
      this.keyValuePairs.put(key, val);
    }

    public Map<ByteBuffer,ByteBuffer> getKeyValuePairs() {
      return this.keyValuePairs;
    }

    public sPut_args setKeyValuePairs(Map<ByteBuffer,ByteBuffer> keyValuePairs) {
      this.keyValuePairs = keyValuePairs;
      return this;
    }

    public void unsetKeyValuePairs() {
      this.keyValuePairs = null;
    }

    /** Returns true if field keyValuePairs is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyValuePairs() {
      return this.keyValuePairs != null;
    }

    public void setKeyValuePairsIsSet(boolean value) {
      if (!value) {
        this.keyValuePairs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY_VALUE_PAIRS:
        if (value == null) {
          unsetKeyValuePairs();
        } else {
          setKeyValuePairs((Map<ByteBuffer,ByteBuffer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY_VALUE_PAIRS:
        return getKeyValuePairs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY_VALUE_PAIRS:
        return isSetKeyValuePairs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sPut_args)
        return this.equals((sPut_args)that);
      return false;
    }

    public boolean equals(sPut_args that) {
      if (that == null)
        return false;

      boolean this_present_keyValuePairs = true && this.isSetKeyValuePairs();
      boolean that_present_keyValuePairs = true && that.isSetKeyValuePairs();
      if (this_present_keyValuePairs || that_present_keyValuePairs) {
        if (!(this_present_keyValuePairs && that_present_keyValuePairs))
          return false;
        if (!this.keyValuePairs.equals(that.keyValuePairs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sPut_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sPut_args typedOther = (sPut_args)other;

      lastComparison = Boolean.valueOf(isSetKeyValuePairs()).compareTo(typedOther.isSetKeyValuePairs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyValuePairs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyValuePairs, typedOther.keyValuePairs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sPut_args(");
      boolean first = true;

      sb.append("keyValuePairs:");
      if (this.keyValuePairs == null) {
        sb.append("null");
      } else {
        sb.append(this.keyValuePairs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sPut_argsStandardSchemeFactory implements SchemeFactory {
      public sPut_argsStandardScheme getScheme() {
        return new sPut_argsStandardScheme();
      }
    }

    private static class sPut_argsStandardScheme extends StandardScheme<sPut_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sPut_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY_VALUE_PAIRS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.keyValuePairs = new HashMap<ByteBuffer,ByteBuffer>(2*_map0.size);
                  for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                  {
                    ByteBuffer _key2; // required
                    ByteBuffer _val3; // required
                    _key2 = iprot.readBinary();
                    _val3 = iprot.readBinary();
                    struct.keyValuePairs.put(_key2, _val3);
                  }
                  iprot.readMapEnd();
                }
                struct.setKeyValuePairsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sPut_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.keyValuePairs != null) {
          oprot.writeFieldBegin(KEY_VALUE_PAIRS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.keyValuePairs.size()));
            for (Map.Entry<ByteBuffer, ByteBuffer> _iter4 : struct.keyValuePairs.entrySet())
            {
              oprot.writeBinary(_iter4.getKey());
              oprot.writeBinary(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sPut_argsTupleSchemeFactory implements SchemeFactory {
      public sPut_argsTupleScheme getScheme() {
        return new sPut_argsTupleScheme();
      }
    }

    private static class sPut_argsTupleScheme extends TupleScheme<sPut_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sPut_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKeyValuePairs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKeyValuePairs()) {
          {
            oprot.writeI32(struct.keyValuePairs.size());
            for (Map.Entry<ByteBuffer, ByteBuffer> _iter5 : struct.keyValuePairs.entrySet())
            {
              oprot.writeBinary(_iter5.getKey());
              oprot.writeBinary(_iter5.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sPut_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.keyValuePairs = new HashMap<ByteBuffer,ByteBuffer>(2*_map6.size);
            for (int _i7 = 0; _i7 < _map6.size; ++_i7)
            {
              ByteBuffer _key8; // required
              ByteBuffer _val9; // required
              _key8 = iprot.readBinary();
              _val9 = iprot.readBinary();
              struct.keyValuePairs.put(_key8, _val9);
            }
          }
          struct.setKeyValuePairsIsSet(true);
        }
      }
    }

  }

  public static class sPut_result implements org.apache.thrift.TBase<sPut_result, sPut_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sPut_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sPut_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sPut_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sPut_result.class, metaDataMap);
    }

    public sPut_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sPut_result(sPut_result other) {
    }

    public sPut_result deepCopy() {
      return new sPut_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sPut_result)
        return this.equals((sPut_result)that);
      return false;
    }

    public boolean equals(sPut_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sPut_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sPut_result typedOther = (sPut_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sPut_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sPut_resultStandardSchemeFactory implements SchemeFactory {
      public sPut_resultStandardScheme getScheme() {
        return new sPut_resultStandardScheme();
      }
    }

    private static class sPut_resultStandardScheme extends StandardScheme<sPut_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sPut_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sPut_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sPut_resultTupleSchemeFactory implements SchemeFactory {
      public sPut_resultTupleScheme getScheme() {
        return new sPut_resultTupleScheme();
      }
    }

    private static class sPut_resultTupleScheme extends TupleScheme<sPut_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sPut_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sPut_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class sRemove_args implements org.apache.thrift.TBase<sRemove_args, sRemove_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sRemove_args");

    private static final org.apache.thrift.protocol.TField KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("keys", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sRemove_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sRemove_argsTupleSchemeFactory());
    }

    public List<ByteBuffer> keys; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEYS((short)1, "keys");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEYS
            return KEYS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEYS, new org.apache.thrift.meta_data.FieldMetaData("keys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sRemove_args.class, metaDataMap);
    }

    public sRemove_args() {
    }

    public sRemove_args(
      List<ByteBuffer> keys)
    {
      this();
      this.keys = keys;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sRemove_args(sRemove_args other) {
      if (other.isSetKeys()) {
        List<ByteBuffer> __this__keys = new ArrayList<ByteBuffer>();
        for (ByteBuffer other_element : other.keys) {
          ByteBuffer temp_binary_element = org.apache.thrift.TBaseHelper.copyBinary(other_element);
;
          __this__keys.add(temp_binary_element);
        }
        this.keys = __this__keys;
      }
    }

    public sRemove_args deepCopy() {
      return new sRemove_args(this);
    }

    @Override
    public void clear() {
      this.keys = null;
    }

    public int getKeysSize() {
      return (this.keys == null) ? 0 : this.keys.size();
    }

    public java.util.Iterator<ByteBuffer> getKeysIterator() {
      return (this.keys == null) ? null : this.keys.iterator();
    }

    public void addToKeys(ByteBuffer elem) {
      if (this.keys == null) {
        this.keys = new ArrayList<ByteBuffer>();
      }
      this.keys.add(elem);
    }

    public List<ByteBuffer> getKeys() {
      return this.keys;
    }

    public sRemove_args setKeys(List<ByteBuffer> keys) {
      this.keys = keys;
      return this;
    }

    public void unsetKeys() {
      this.keys = null;
    }

    /** Returns true if field keys is set (has been assigned a value) and false otherwise */
    public boolean isSetKeys() {
      return this.keys != null;
    }

    public void setKeysIsSet(boolean value) {
      if (!value) {
        this.keys = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEYS:
        if (value == null) {
          unsetKeys();
        } else {
          setKeys((List<ByteBuffer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEYS:
        return getKeys();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEYS:
        return isSetKeys();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sRemove_args)
        return this.equals((sRemove_args)that);
      return false;
    }

    public boolean equals(sRemove_args that) {
      if (that == null)
        return false;

      boolean this_present_keys = true && this.isSetKeys();
      boolean that_present_keys = true && that.isSetKeys();
      if (this_present_keys || that_present_keys) {
        if (!(this_present_keys && that_present_keys))
          return false;
        if (!this.keys.equals(that.keys))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sRemove_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sRemove_args typedOther = (sRemove_args)other;

      lastComparison = Boolean.valueOf(isSetKeys()).compareTo(typedOther.isSetKeys());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeys()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys, typedOther.keys);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sRemove_args(");
      boolean first = true;

      sb.append("keys:");
      if (this.keys == null) {
        sb.append("null");
      } else {
        sb.append(this.keys);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sRemove_argsStandardSchemeFactory implements SchemeFactory {
      public sRemove_argsStandardScheme getScheme() {
        return new sRemove_argsStandardScheme();
      }
    }

    private static class sRemove_argsStandardScheme extends StandardScheme<sRemove_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sRemove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEYS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                  struct.keys = new ArrayList<ByteBuffer>(_list10.size);
                  for (int _i11 = 0; _i11 < _list10.size; ++_i11)
                  {
                    ByteBuffer _elem12; // required
                    _elem12 = iprot.readBinary();
                    struct.keys.add(_elem12);
                  }
                  iprot.readListEnd();
                }
                struct.setKeysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sRemove_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.keys != null) {
          oprot.writeFieldBegin(KEYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keys.size()));
            for (ByteBuffer _iter13 : struct.keys)
            {
              oprot.writeBinary(_iter13);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sRemove_argsTupleSchemeFactory implements SchemeFactory {
      public sRemove_argsTupleScheme getScheme() {
        return new sRemove_argsTupleScheme();
      }
    }

    private static class sRemove_argsTupleScheme extends TupleScheme<sRemove_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sRemove_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKeys()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKeys()) {
          {
            oprot.writeI32(struct.keys.size());
            for (ByteBuffer _iter14 : struct.keys)
            {
              oprot.writeBinary(_iter14);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sRemove_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.keys = new ArrayList<ByteBuffer>(_list15.size);
            for (int _i16 = 0; _i16 < _list15.size; ++_i16)
            {
              ByteBuffer _elem17; // required
              _elem17 = iprot.readBinary();
              struct.keys.add(_elem17);
            }
          }
          struct.setKeysIsSet(true);
        }
      }
    }

  }

  public static class sRemove_result implements org.apache.thrift.TBase<sRemove_result, sRemove_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sRemove_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sRemove_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sRemove_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sRemove_result.class, metaDataMap);
    }

    public sRemove_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sRemove_result(sRemove_result other) {
    }

    public sRemove_result deepCopy() {
      return new sRemove_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sRemove_result)
        return this.equals((sRemove_result)that);
      return false;
    }

    public boolean equals(sRemove_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sRemove_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sRemove_result typedOther = (sRemove_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sRemove_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sRemove_resultStandardSchemeFactory implements SchemeFactory {
      public sRemove_resultStandardScheme getScheme() {
        return new sRemove_resultStandardScheme();
      }
    }

    private static class sRemove_resultStandardScheme extends StandardScheme<sRemove_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sRemove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sRemove_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sRemove_resultTupleSchemeFactory implements SchemeFactory {
      public sRemove_resultTupleScheme getScheme() {
        return new sRemove_resultTupleScheme();
      }
    }

    private static class sRemove_resultTupleScheme extends TupleScheme<sRemove_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sRemove_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sRemove_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getSegmentHashes_args implements org.apache.thrift.TBase<getSegmentHashes_args, getSegmentHashes_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSegmentHashes_args");

    private static final org.apache.thrift.protocol.TField TREE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("treeId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeIds", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSegmentHashes_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSegmentHashes_argsTupleSchemeFactory());
    }

    public long treeId; // required
    public List<Integer> nodeIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREE_ID((short)1, "treeId"),
      NODE_IDS((short)2, "nodeIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREE_ID
            return TREE_ID;
          case 2: // NODE_IDS
            return NODE_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TREEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREE_ID, new org.apache.thrift.meta_data.FieldMetaData("treeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NODE_IDS, new org.apache.thrift.meta_data.FieldMetaData("nodeIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSegmentHashes_args.class, metaDataMap);
    }

    public getSegmentHashes_args() {
    }

    public getSegmentHashes_args(
      long treeId,
      List<Integer> nodeIds)
    {
      this();
      this.treeId = treeId;
      setTreeIdIsSet(true);
      this.nodeIds = nodeIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSegmentHashes_args(getSegmentHashes_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.treeId = other.treeId;
      if (other.isSetNodeIds()) {
        List<Integer> __this__nodeIds = new ArrayList<Integer>();
        for (Integer other_element : other.nodeIds) {
          __this__nodeIds.add(other_element);
        }
        this.nodeIds = __this__nodeIds;
      }
    }

    public getSegmentHashes_args deepCopy() {
      return new getSegmentHashes_args(this);
    }

    @Override
    public void clear() {
      setTreeIdIsSet(false);
      this.treeId = 0;
      this.nodeIds = null;
    }

    public long getTreeId() {
      return this.treeId;
    }

    public getSegmentHashes_args setTreeId(long treeId) {
      this.treeId = treeId;
      setTreeIdIsSet(true);
      return this;
    }

    public void unsetTreeId() {
      __isset_bit_vector.clear(__TREEID_ISSET_ID);
    }

    /** Returns true if field treeId is set (has been assigned a value) and false otherwise */
    public boolean isSetTreeId() {
      return __isset_bit_vector.get(__TREEID_ISSET_ID);
    }

    public void setTreeIdIsSet(boolean value) {
      __isset_bit_vector.set(__TREEID_ISSET_ID, value);
    }

    public int getNodeIdsSize() {
      return (this.nodeIds == null) ? 0 : this.nodeIds.size();
    }

    public java.util.Iterator<Integer> getNodeIdsIterator() {
      return (this.nodeIds == null) ? null : this.nodeIds.iterator();
    }

    public void addToNodeIds(int elem) {
      if (this.nodeIds == null) {
        this.nodeIds = new ArrayList<Integer>();
      }
      this.nodeIds.add(elem);
    }

    public List<Integer> getNodeIds() {
      return this.nodeIds;
    }

    public getSegmentHashes_args setNodeIds(List<Integer> nodeIds) {
      this.nodeIds = nodeIds;
      return this;
    }

    public void unsetNodeIds() {
      this.nodeIds = null;
    }

    /** Returns true if field nodeIds is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeIds() {
      return this.nodeIds != null;
    }

    public void setNodeIdsIsSet(boolean value) {
      if (!value) {
        this.nodeIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREE_ID:
        if (value == null) {
          unsetTreeId();
        } else {
          setTreeId((Long)value);
        }
        break;

      case NODE_IDS:
        if (value == null) {
          unsetNodeIds();
        } else {
          setNodeIds((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREE_ID:
        return Long.valueOf(getTreeId());

      case NODE_IDS:
        return getNodeIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREE_ID:
        return isSetTreeId();
      case NODE_IDS:
        return isSetNodeIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSegmentHashes_args)
        return this.equals((getSegmentHashes_args)that);
      return false;
    }

    public boolean equals(getSegmentHashes_args that) {
      if (that == null)
        return false;

      boolean this_present_treeId = true;
      boolean that_present_treeId = true;
      if (this_present_treeId || that_present_treeId) {
        if (!(this_present_treeId && that_present_treeId))
          return false;
        if (this.treeId != that.treeId)
          return false;
      }

      boolean this_present_nodeIds = true && this.isSetNodeIds();
      boolean that_present_nodeIds = true && that.isSetNodeIds();
      if (this_present_nodeIds || that_present_nodeIds) {
        if (!(this_present_nodeIds && that_present_nodeIds))
          return false;
        if (!this.nodeIds.equals(that.nodeIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSegmentHashes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSegmentHashes_args typedOther = (getSegmentHashes_args)other;

      lastComparison = Boolean.valueOf(isSetTreeId()).compareTo(typedOther.isSetTreeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTreeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treeId, typedOther.treeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodeIds()).compareTo(typedOther.isSetNodeIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeIds, typedOther.nodeIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSegmentHashes_args(");
      boolean first = true;

      sb.append("treeId:");
      sb.append(this.treeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeIds:");
      if (this.nodeIds == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSegmentHashes_argsStandardSchemeFactory implements SchemeFactory {
      public getSegmentHashes_argsStandardScheme getScheme() {
        return new getSegmentHashes_argsStandardScheme();
      }
    }

    private static class getSegmentHashes_argsStandardScheme extends StandardScheme<getSegmentHashes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSegmentHashes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.treeId = iprot.readI64();
                struct.setTreeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODE_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                  struct.nodeIds = new ArrayList<Integer>(_list18.size);
                  for (int _i19 = 0; _i19 < _list18.size; ++_i19)
                  {
                    int _elem20; // required
                    _elem20 = iprot.readI32();
                    struct.nodeIds.add(_elem20);
                  }
                  iprot.readListEnd();
                }
                struct.setNodeIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSegmentHashes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TREE_ID_FIELD_DESC);
        oprot.writeI64(struct.treeId);
        oprot.writeFieldEnd();
        if (struct.nodeIds != null) {
          oprot.writeFieldBegin(NODE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.nodeIds.size()));
            for (int _iter21 : struct.nodeIds)
            {
              oprot.writeI32(_iter21);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSegmentHashes_argsTupleSchemeFactory implements SchemeFactory {
      public getSegmentHashes_argsTupleScheme getScheme() {
        return new getSegmentHashes_argsTupleScheme();
      }
    }

    private static class getSegmentHashes_argsTupleScheme extends TupleScheme<getSegmentHashes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSegmentHashes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTreeId()) {
          optionals.set(0);
        }
        if (struct.isSetNodeIds()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTreeId()) {
          oprot.writeI64(struct.treeId);
        }
        if (struct.isSetNodeIds()) {
          {
            oprot.writeI32(struct.nodeIds.size());
            for (int _iter22 : struct.nodeIds)
            {
              oprot.writeI32(_iter22);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSegmentHashes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.treeId = iprot.readI64();
          struct.setTreeIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.nodeIds = new ArrayList<Integer>(_list23.size);
            for (int _i24 = 0; _i24 < _list23.size; ++_i24)
            {
              int _elem25; // required
              _elem25 = iprot.readI32();
              struct.nodeIds.add(_elem25);
            }
          }
          struct.setNodeIdsIsSet(true);
        }
      }
    }

  }

  public static class getSegmentHashes_result implements org.apache.thrift.TBase<getSegmentHashes_result, getSegmentHashes_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSegmentHashes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSegmentHashes_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSegmentHashes_resultTupleSchemeFactory());
    }

    public List<SegmentHash> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SegmentHash.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSegmentHashes_result.class, metaDataMap);
    }

    public getSegmentHashes_result() {
    }

    public getSegmentHashes_result(
      List<SegmentHash> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSegmentHashes_result(getSegmentHashes_result other) {
      if (other.isSetSuccess()) {
        List<SegmentHash> __this__success = new ArrayList<SegmentHash>();
        for (SegmentHash other_element : other.success) {
          __this__success.add(new SegmentHash(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSegmentHashes_result deepCopy() {
      return new getSegmentHashes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SegmentHash> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SegmentHash elem) {
      if (this.success == null) {
        this.success = new ArrayList<SegmentHash>();
      }
      this.success.add(elem);
    }

    public List<SegmentHash> getSuccess() {
      return this.success;
    }

    public getSegmentHashes_result setSuccess(List<SegmentHash> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SegmentHash>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSegmentHashes_result)
        return this.equals((getSegmentHashes_result)that);
      return false;
    }

    public boolean equals(getSegmentHashes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSegmentHashes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSegmentHashes_result typedOther = (getSegmentHashes_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSegmentHashes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSegmentHashes_resultStandardSchemeFactory implements SchemeFactory {
      public getSegmentHashes_resultStandardScheme getScheme() {
        return new getSegmentHashes_resultStandardScheme();
      }
    }

    private static class getSegmentHashes_resultStandardScheme extends StandardScheme<getSegmentHashes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSegmentHashes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                  struct.success = new ArrayList<SegmentHash>(_list26.size);
                  for (int _i27 = 0; _i27 < _list26.size; ++_i27)
                  {
                    SegmentHash _elem28; // required
                    _elem28 = new SegmentHash();
                    _elem28.read(iprot);
                    struct.success.add(_elem28);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSegmentHashes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SegmentHash _iter29 : struct.success)
            {
              _iter29.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSegmentHashes_resultTupleSchemeFactory implements SchemeFactory {
      public getSegmentHashes_resultTupleScheme getScheme() {
        return new getSegmentHashes_resultTupleScheme();
      }
    }

    private static class getSegmentHashes_resultTupleScheme extends TupleScheme<getSegmentHashes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSegmentHashes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SegmentHash _iter30 : struct.success)
            {
              _iter30.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSegmentHashes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SegmentHash>(_list31.size);
            for (int _i32 = 0; _i32 < _list31.size; ++_i32)
            {
              SegmentHash _elem33; // required
              _elem33 = new SegmentHash();
              _elem33.read(iprot);
              struct.success.add(_elem33);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSegmentHash_args implements org.apache.thrift.TBase<getSegmentHash_args, getSegmentHash_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSegmentHash_args");

    private static final org.apache.thrift.protocol.TField TREE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("treeId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSegmentHash_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSegmentHash_argsTupleSchemeFactory());
    }

    public long treeId; // required
    public int nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREE_ID((short)1, "treeId"),
      NODE_ID((short)2, "nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREE_ID
            return TREE_ID;
          case 2: // NODE_ID
            return NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TREEID_ISSET_ID = 0;
    private static final int __NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREE_ID, new org.apache.thrift.meta_data.FieldMetaData("treeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSegmentHash_args.class, metaDataMap);
    }

    public getSegmentHash_args() {
    }

    public getSegmentHash_args(
      long treeId,
      int nodeId)
    {
      this();
      this.treeId = treeId;
      setTreeIdIsSet(true);
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSegmentHash_args(getSegmentHash_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.treeId = other.treeId;
      this.nodeId = other.nodeId;
    }

    public getSegmentHash_args deepCopy() {
      return new getSegmentHash_args(this);
    }

    @Override
    public void clear() {
      setTreeIdIsSet(false);
      this.treeId = 0;
      setNodeIdIsSet(false);
      this.nodeId = 0;
    }

    public long getTreeId() {
      return this.treeId;
    }

    public getSegmentHash_args setTreeId(long treeId) {
      this.treeId = treeId;
      setTreeIdIsSet(true);
      return this;
    }

    public void unsetTreeId() {
      __isset_bit_vector.clear(__TREEID_ISSET_ID);
    }

    /** Returns true if field treeId is set (has been assigned a value) and false otherwise */
    public boolean isSetTreeId() {
      return __isset_bit_vector.get(__TREEID_ISSET_ID);
    }

    public void setTreeIdIsSet(boolean value) {
      __isset_bit_vector.set(__TREEID_ISSET_ID, value);
    }

    public int getNodeId() {
      return this.nodeId;
    }

    public getSegmentHash_args setNodeId(int nodeId) {
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
      return this;
    }

    public void unsetNodeId() {
      __isset_bit_vector.clear(__NODEID_ISSET_ID);
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return __isset_bit_vector.get(__NODEID_ISSET_ID);
    }

    public void setNodeIdIsSet(boolean value) {
      __isset_bit_vector.set(__NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREE_ID:
        if (value == null) {
          unsetTreeId();
        } else {
          setTreeId((Long)value);
        }
        break;

      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREE_ID:
        return Long.valueOf(getTreeId());

      case NODE_ID:
        return Integer.valueOf(getNodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREE_ID:
        return isSetTreeId();
      case NODE_ID:
        return isSetNodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSegmentHash_args)
        return this.equals((getSegmentHash_args)that);
      return false;
    }

    public boolean equals(getSegmentHash_args that) {
      if (that == null)
        return false;

      boolean this_present_treeId = true;
      boolean that_present_treeId = true;
      if (this_present_treeId || that_present_treeId) {
        if (!(this_present_treeId && that_present_treeId))
          return false;
        if (this.treeId != that.treeId)
          return false;
      }

      boolean this_present_nodeId = true;
      boolean that_present_nodeId = true;
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (this.nodeId != that.nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSegmentHash_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSegmentHash_args typedOther = (getSegmentHash_args)other;

      lastComparison = Boolean.valueOf(isSetTreeId()).compareTo(typedOther.isSetTreeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTreeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treeId, typedOther.treeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(typedOther.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, typedOther.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSegmentHash_args(");
      boolean first = true;

      sb.append("treeId:");
      sb.append(this.treeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeId:");
      sb.append(this.nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSegmentHash_argsStandardSchemeFactory implements SchemeFactory {
      public getSegmentHash_argsStandardScheme getScheme() {
        return new getSegmentHash_argsStandardScheme();
      }
    }

    private static class getSegmentHash_argsStandardScheme extends StandardScheme<getSegmentHash_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSegmentHash_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.treeId = iprot.readI64();
                struct.setTreeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nodeId = iprot.readI32();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSegmentHash_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TREE_ID_FIELD_DESC);
        oprot.writeI64(struct.treeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
        oprot.writeI32(struct.nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSegmentHash_argsTupleSchemeFactory implements SchemeFactory {
      public getSegmentHash_argsTupleScheme getScheme() {
        return new getSegmentHash_argsTupleScheme();
      }
    }

    private static class getSegmentHash_argsTupleScheme extends TupleScheme<getSegmentHash_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSegmentHash_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTreeId()) {
          optionals.set(0);
        }
        if (struct.isSetNodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTreeId()) {
          oprot.writeI64(struct.treeId);
        }
        if (struct.isSetNodeId()) {
          oprot.writeI32(struct.nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSegmentHash_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.treeId = iprot.readI64();
          struct.setTreeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nodeId = iprot.readI32();
          struct.setNodeIdIsSet(true);
        }
      }
    }

  }

  public static class getSegmentHash_result implements org.apache.thrift.TBase<getSegmentHash_result, getSegmentHash_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSegmentHash_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSegmentHash_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSegmentHash_resultTupleSchemeFactory());
    }

    public SegmentHash success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SegmentHash.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSegmentHash_result.class, metaDataMap);
    }

    public getSegmentHash_result() {
    }

    public getSegmentHash_result(
      SegmentHash success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSegmentHash_result(getSegmentHash_result other) {
      if (other.isSetSuccess()) {
        this.success = new SegmentHash(other.success);
      }
    }

    public getSegmentHash_result deepCopy() {
      return new getSegmentHash_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SegmentHash getSuccess() {
      return this.success;
    }

    public getSegmentHash_result setSuccess(SegmentHash success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SegmentHash)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSegmentHash_result)
        return this.equals((getSegmentHash_result)that);
      return false;
    }

    public boolean equals(getSegmentHash_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSegmentHash_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSegmentHash_result typedOther = (getSegmentHash_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSegmentHash_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSegmentHash_resultStandardSchemeFactory implements SchemeFactory {
      public getSegmentHash_resultStandardScheme getScheme() {
        return new getSegmentHash_resultStandardScheme();
      }
    }

    private static class getSegmentHash_resultStandardScheme extends StandardScheme<getSegmentHash_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSegmentHash_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SegmentHash();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSegmentHash_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSegmentHash_resultTupleSchemeFactory implements SchemeFactory {
      public getSegmentHash_resultTupleScheme getScheme() {
        return new getSegmentHash_resultTupleScheme();
      }
    }

    private static class getSegmentHash_resultTupleScheme extends TupleScheme<getSegmentHash_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSegmentHash_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSegmentHash_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SegmentHash();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSegment_args implements org.apache.thrift.TBase<getSegment_args, getSegment_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSegment_args");

    private static final org.apache.thrift.protocol.TField TREE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("treeId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SEG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("segId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSegment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSegment_argsTupleSchemeFactory());
    }

    public long treeId; // required
    public int segId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREE_ID((short)1, "treeId"),
      SEG_ID((short)2, "segId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREE_ID
            return TREE_ID;
          case 2: // SEG_ID
            return SEG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TREEID_ISSET_ID = 0;
    private static final int __SEGID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREE_ID, new org.apache.thrift.meta_data.FieldMetaData("treeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SEG_ID, new org.apache.thrift.meta_data.FieldMetaData("segId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSegment_args.class, metaDataMap);
    }

    public getSegment_args() {
    }

    public getSegment_args(
      long treeId,
      int segId)
    {
      this();
      this.treeId = treeId;
      setTreeIdIsSet(true);
      this.segId = segId;
      setSegIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSegment_args(getSegment_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.treeId = other.treeId;
      this.segId = other.segId;
    }

    public getSegment_args deepCopy() {
      return new getSegment_args(this);
    }

    @Override
    public void clear() {
      setTreeIdIsSet(false);
      this.treeId = 0;
      setSegIdIsSet(false);
      this.segId = 0;
    }

    public long getTreeId() {
      return this.treeId;
    }

    public getSegment_args setTreeId(long treeId) {
      this.treeId = treeId;
      setTreeIdIsSet(true);
      return this;
    }

    public void unsetTreeId() {
      __isset_bit_vector.clear(__TREEID_ISSET_ID);
    }

    /** Returns true if field treeId is set (has been assigned a value) and false otherwise */
    public boolean isSetTreeId() {
      return __isset_bit_vector.get(__TREEID_ISSET_ID);
    }

    public void setTreeIdIsSet(boolean value) {
      __isset_bit_vector.set(__TREEID_ISSET_ID, value);
    }

    public int getSegId() {
      return this.segId;
    }

    public getSegment_args setSegId(int segId) {
      this.segId = segId;
      setSegIdIsSet(true);
      return this;
    }

    public void unsetSegId() {
      __isset_bit_vector.clear(__SEGID_ISSET_ID);
    }

    /** Returns true if field segId is set (has been assigned a value) and false otherwise */
    public boolean isSetSegId() {
      return __isset_bit_vector.get(__SEGID_ISSET_ID);
    }

    public void setSegIdIsSet(boolean value) {
      __isset_bit_vector.set(__SEGID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREE_ID:
        if (value == null) {
          unsetTreeId();
        } else {
          setTreeId((Long)value);
        }
        break;

      case SEG_ID:
        if (value == null) {
          unsetSegId();
        } else {
          setSegId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREE_ID:
        return Long.valueOf(getTreeId());

      case SEG_ID:
        return Integer.valueOf(getSegId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREE_ID:
        return isSetTreeId();
      case SEG_ID:
        return isSetSegId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSegment_args)
        return this.equals((getSegment_args)that);
      return false;
    }

    public boolean equals(getSegment_args that) {
      if (that == null)
        return false;

      boolean this_present_treeId = true;
      boolean that_present_treeId = true;
      if (this_present_treeId || that_present_treeId) {
        if (!(this_present_treeId && that_present_treeId))
          return false;
        if (this.treeId != that.treeId)
          return false;
      }

      boolean this_present_segId = true;
      boolean that_present_segId = true;
      if (this_present_segId || that_present_segId) {
        if (!(this_present_segId && that_present_segId))
          return false;
        if (this.segId != that.segId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSegment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSegment_args typedOther = (getSegment_args)other;

      lastComparison = Boolean.valueOf(isSetTreeId()).compareTo(typedOther.isSetTreeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTreeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treeId, typedOther.treeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSegId()).compareTo(typedOther.isSetSegId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSegId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.segId, typedOther.segId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSegment_args(");
      boolean first = true;

      sb.append("treeId:");
      sb.append(this.treeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("segId:");
      sb.append(this.segId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSegment_argsStandardSchemeFactory implements SchemeFactory {
      public getSegment_argsStandardScheme getScheme() {
        return new getSegment_argsStandardScheme();
      }
    }

    private static class getSegment_argsStandardScheme extends StandardScheme<getSegment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSegment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.treeId = iprot.readI64();
                struct.setTreeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.segId = iprot.readI32();
                struct.setSegIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSegment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TREE_ID_FIELD_DESC);
        oprot.writeI64(struct.treeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SEG_ID_FIELD_DESC);
        oprot.writeI32(struct.segId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSegment_argsTupleSchemeFactory implements SchemeFactory {
      public getSegment_argsTupleScheme getScheme() {
        return new getSegment_argsTupleScheme();
      }
    }

    private static class getSegment_argsTupleScheme extends TupleScheme<getSegment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSegment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTreeId()) {
          optionals.set(0);
        }
        if (struct.isSetSegId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTreeId()) {
          oprot.writeI64(struct.treeId);
        }
        if (struct.isSetSegId()) {
          oprot.writeI32(struct.segId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSegment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.treeId = iprot.readI64();
          struct.setTreeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.segId = iprot.readI32();
          struct.setSegIdIsSet(true);
        }
      }
    }

  }

  public static class getSegment_result implements org.apache.thrift.TBase<getSegment_result, getSegment_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSegment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSegment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSegment_resultTupleSchemeFactory());
    }

    public List<SegmentData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SegmentData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSegment_result.class, metaDataMap);
    }

    public getSegment_result() {
    }

    public getSegment_result(
      List<SegmentData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSegment_result(getSegment_result other) {
      if (other.isSetSuccess()) {
        List<SegmentData> __this__success = new ArrayList<SegmentData>();
        for (SegmentData other_element : other.success) {
          __this__success.add(new SegmentData(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSegment_result deepCopy() {
      return new getSegment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SegmentData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SegmentData elem) {
      if (this.success == null) {
        this.success = new ArrayList<SegmentData>();
      }
      this.success.add(elem);
    }

    public List<SegmentData> getSuccess() {
      return this.success;
    }

    public getSegment_result setSuccess(List<SegmentData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SegmentData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSegment_result)
        return this.equals((getSegment_result)that);
      return false;
    }

    public boolean equals(getSegment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSegment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSegment_result typedOther = (getSegment_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSegment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSegment_resultStandardSchemeFactory implements SchemeFactory {
      public getSegment_resultStandardScheme getScheme() {
        return new getSegment_resultStandardScheme();
      }
    }

    private static class getSegment_resultStandardScheme extends StandardScheme<getSegment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSegment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                  struct.success = new ArrayList<SegmentData>(_list34.size);
                  for (int _i35 = 0; _i35 < _list34.size; ++_i35)
                  {
                    SegmentData _elem36; // required
                    _elem36 = new SegmentData();
                    _elem36.read(iprot);
                    struct.success.add(_elem36);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSegment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SegmentData _iter37 : struct.success)
            {
              _iter37.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSegment_resultTupleSchemeFactory implements SchemeFactory {
      public getSegment_resultTupleScheme getScheme() {
        return new getSegment_resultTupleScheme();
      }
    }

    private static class getSegment_resultTupleScheme extends TupleScheme<getSegment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSegment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SegmentData _iter38 : struct.success)
            {
              _iter38.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSegment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SegmentData>(_list39.size);
            for (int _i40 = 0; _i40 < _list39.size; ++_i40)
            {
              SegmentData _elem41; // required
              _elem41 = new SegmentData();
              _elem41.read(iprot);
              struct.success.add(_elem41);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSegmentData_args implements org.apache.thrift.TBase<getSegmentData_args, getSegmentData_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSegmentData_args");

    private static final org.apache.thrift.protocol.TField TREE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("treeId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SEG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("segId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSegmentData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSegmentData_argsTupleSchemeFactory());
    }

    public long treeId; // required
    public int segId; // required
    public ByteBuffer key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREE_ID((short)1, "treeId"),
      SEG_ID((short)2, "segId"),
      KEY((short)3, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREE_ID
            return TREE_ID;
          case 2: // SEG_ID
            return SEG_ID;
          case 3: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TREEID_ISSET_ID = 0;
    private static final int __SEGID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREE_ID, new org.apache.thrift.meta_data.FieldMetaData("treeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SEG_ID, new org.apache.thrift.meta_data.FieldMetaData("segId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSegmentData_args.class, metaDataMap);
    }

    public getSegmentData_args() {
    }

    public getSegmentData_args(
      long treeId,
      int segId,
      ByteBuffer key)
    {
      this();
      this.treeId = treeId;
      setTreeIdIsSet(true);
      this.segId = segId;
      setSegIdIsSet(true);
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSegmentData_args(getSegmentData_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.treeId = other.treeId;
      this.segId = other.segId;
      if (other.isSetKey()) {
        this.key = org.apache.thrift.TBaseHelper.copyBinary(other.key);
;
      }
    }

    public getSegmentData_args deepCopy() {
      return new getSegmentData_args(this);
    }

    @Override
    public void clear() {
      setTreeIdIsSet(false);
      this.treeId = 0;
      setSegIdIsSet(false);
      this.segId = 0;
      this.key = null;
    }

    public long getTreeId() {
      return this.treeId;
    }

    public getSegmentData_args setTreeId(long treeId) {
      this.treeId = treeId;
      setTreeIdIsSet(true);
      return this;
    }

    public void unsetTreeId() {
      __isset_bit_vector.clear(__TREEID_ISSET_ID);
    }

    /** Returns true if field treeId is set (has been assigned a value) and false otherwise */
    public boolean isSetTreeId() {
      return __isset_bit_vector.get(__TREEID_ISSET_ID);
    }

    public void setTreeIdIsSet(boolean value) {
      __isset_bit_vector.set(__TREEID_ISSET_ID, value);
    }

    public int getSegId() {
      return this.segId;
    }

    public getSegmentData_args setSegId(int segId) {
      this.segId = segId;
      setSegIdIsSet(true);
      return this;
    }

    public void unsetSegId() {
      __isset_bit_vector.clear(__SEGID_ISSET_ID);
    }

    /** Returns true if field segId is set (has been assigned a value) and false otherwise */
    public boolean isSetSegId() {
      return __isset_bit_vector.get(__SEGID_ISSET_ID);
    }

    public void setSegIdIsSet(boolean value) {
      __isset_bit_vector.set(__SEGID_ISSET_ID, value);
    }

    public byte[] getKey() {
      setKey(org.apache.thrift.TBaseHelper.rightSize(key));
      return key == null ? null : key.array();
    }

    public ByteBuffer bufferForKey() {
      return key;
    }

    public getSegmentData_args setKey(byte[] key) {
      setKey(key == null ? (ByteBuffer)null : ByteBuffer.wrap(key));
      return this;
    }

    public getSegmentData_args setKey(ByteBuffer key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREE_ID:
        if (value == null) {
          unsetTreeId();
        } else {
          setTreeId((Long)value);
        }
        break;

      case SEG_ID:
        if (value == null) {
          unsetSegId();
        } else {
          setSegId((Integer)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREE_ID:
        return Long.valueOf(getTreeId());

      case SEG_ID:
        return Integer.valueOf(getSegId());

      case KEY:
        return getKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREE_ID:
        return isSetTreeId();
      case SEG_ID:
        return isSetSegId();
      case KEY:
        return isSetKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSegmentData_args)
        return this.equals((getSegmentData_args)that);
      return false;
    }

    public boolean equals(getSegmentData_args that) {
      if (that == null)
        return false;

      boolean this_present_treeId = true;
      boolean that_present_treeId = true;
      if (this_present_treeId || that_present_treeId) {
        if (!(this_present_treeId && that_present_treeId))
          return false;
        if (this.treeId != that.treeId)
          return false;
      }

      boolean this_present_segId = true;
      boolean that_present_segId = true;
      if (this_present_segId || that_present_segId) {
        if (!(this_present_segId && that_present_segId))
          return false;
        if (this.segId != that.segId)
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSegmentData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSegmentData_args typedOther = (getSegmentData_args)other;

      lastComparison = Boolean.valueOf(isSetTreeId()).compareTo(typedOther.isSetTreeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTreeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treeId, typedOther.treeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSegId()).compareTo(typedOther.isSetSegId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSegId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.segId, typedOther.segId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSegmentData_args(");
      boolean first = true;

      sb.append("treeId:");
      sb.append(this.treeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("segId:");
      sb.append(this.segId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.key, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSegmentData_argsStandardSchemeFactory implements SchemeFactory {
      public getSegmentData_argsStandardScheme getScheme() {
        return new getSegmentData_argsStandardScheme();
      }
    }

    private static class getSegmentData_argsStandardScheme extends StandardScheme<getSegmentData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSegmentData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.treeId = iprot.readI64();
                struct.setTreeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.segId = iprot.readI32();
                struct.setSegIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readBinary();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSegmentData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TREE_ID_FIELD_DESC);
        oprot.writeI64(struct.treeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SEG_ID_FIELD_DESC);
        oprot.writeI32(struct.segId);
        oprot.writeFieldEnd();
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeBinary(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSegmentData_argsTupleSchemeFactory implements SchemeFactory {
      public getSegmentData_argsTupleScheme getScheme() {
        return new getSegmentData_argsTupleScheme();
      }
    }

    private static class getSegmentData_argsTupleScheme extends TupleScheme<getSegmentData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSegmentData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTreeId()) {
          optionals.set(0);
        }
        if (struct.isSetSegId()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTreeId()) {
          oprot.writeI64(struct.treeId);
        }
        if (struct.isSetSegId()) {
          oprot.writeI32(struct.segId);
        }
        if (struct.isSetKey()) {
          oprot.writeBinary(struct.key);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSegmentData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.treeId = iprot.readI64();
          struct.setTreeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.segId = iprot.readI32();
          struct.setSegIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readBinary();
          struct.setKeyIsSet(true);
        }
      }
    }

  }

  public static class getSegmentData_result implements org.apache.thrift.TBase<getSegmentData_result, getSegmentData_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSegmentData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSegmentData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSegmentData_resultTupleSchemeFactory());
    }

    public SegmentData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SegmentData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSegmentData_result.class, metaDataMap);
    }

    public getSegmentData_result() {
    }

    public getSegmentData_result(
      SegmentData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSegmentData_result(getSegmentData_result other) {
      if (other.isSetSuccess()) {
        this.success = new SegmentData(other.success);
      }
    }

    public getSegmentData_result deepCopy() {
      return new getSegmentData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SegmentData getSuccess() {
      return this.success;
    }

    public getSegmentData_result setSuccess(SegmentData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SegmentData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSegmentData_result)
        return this.equals((getSegmentData_result)that);
      return false;
    }

    public boolean equals(getSegmentData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSegmentData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSegmentData_result typedOther = (getSegmentData_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSegmentData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSegmentData_resultStandardSchemeFactory implements SchemeFactory {
      public getSegmentData_resultStandardScheme getScheme() {
        return new getSegmentData_resultStandardScheme();
      }
    }

    private static class getSegmentData_resultStandardScheme extends StandardScheme<getSegmentData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSegmentData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SegmentData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSegmentData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSegmentData_resultTupleSchemeFactory implements SchemeFactory {
      public getSegmentData_resultTupleScheme getScheme() {
        return new getSegmentData_resultTupleScheme();
      }
    }

    private static class getSegmentData_resultTupleScheme extends TupleScheme<getSegmentData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSegmentData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSegmentData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SegmentData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteTreeNodes_args implements org.apache.thrift.TBase<deleteTreeNodes_args, deleteTreeNodes_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTreeNodes_args");

    private static final org.apache.thrift.protocol.TField TREE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("treeId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeIds", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteTreeNodes_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteTreeNodes_argsTupleSchemeFactory());
    }

    public long treeId; // required
    public List<Integer> nodeIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREE_ID((short)1, "treeId"),
      NODE_IDS((short)2, "nodeIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREE_ID
            return TREE_ID;
          case 2: // NODE_IDS
            return NODE_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TREEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREE_ID, new org.apache.thrift.meta_data.FieldMetaData("treeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NODE_IDS, new org.apache.thrift.meta_data.FieldMetaData("nodeIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteTreeNodes_args.class, metaDataMap);
    }

    public deleteTreeNodes_args() {
    }

    public deleteTreeNodes_args(
      long treeId,
      List<Integer> nodeIds)
    {
      this();
      this.treeId = treeId;
      setTreeIdIsSet(true);
      this.nodeIds = nodeIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteTreeNodes_args(deleteTreeNodes_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.treeId = other.treeId;
      if (other.isSetNodeIds()) {
        List<Integer> __this__nodeIds = new ArrayList<Integer>();
        for (Integer other_element : other.nodeIds) {
          __this__nodeIds.add(other_element);
        }
        this.nodeIds = __this__nodeIds;
      }
    }

    public deleteTreeNodes_args deepCopy() {
      return new deleteTreeNodes_args(this);
    }

    @Override
    public void clear() {
      setTreeIdIsSet(false);
      this.treeId = 0;
      this.nodeIds = null;
    }

    public long getTreeId() {
      return this.treeId;
    }

    public deleteTreeNodes_args setTreeId(long treeId) {
      this.treeId = treeId;
      setTreeIdIsSet(true);
      return this;
    }

    public void unsetTreeId() {
      __isset_bit_vector.clear(__TREEID_ISSET_ID);
    }

    /** Returns true if field treeId is set (has been assigned a value) and false otherwise */
    public boolean isSetTreeId() {
      return __isset_bit_vector.get(__TREEID_ISSET_ID);
    }

    public void setTreeIdIsSet(boolean value) {
      __isset_bit_vector.set(__TREEID_ISSET_ID, value);
    }

    public int getNodeIdsSize() {
      return (this.nodeIds == null) ? 0 : this.nodeIds.size();
    }

    public java.util.Iterator<Integer> getNodeIdsIterator() {
      return (this.nodeIds == null) ? null : this.nodeIds.iterator();
    }

    public void addToNodeIds(int elem) {
      if (this.nodeIds == null) {
        this.nodeIds = new ArrayList<Integer>();
      }
      this.nodeIds.add(elem);
    }

    public List<Integer> getNodeIds() {
      return this.nodeIds;
    }

    public deleteTreeNodes_args setNodeIds(List<Integer> nodeIds) {
      this.nodeIds = nodeIds;
      return this;
    }

    public void unsetNodeIds() {
      this.nodeIds = null;
    }

    /** Returns true if field nodeIds is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeIds() {
      return this.nodeIds != null;
    }

    public void setNodeIdsIsSet(boolean value) {
      if (!value) {
        this.nodeIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREE_ID:
        if (value == null) {
          unsetTreeId();
        } else {
          setTreeId((Long)value);
        }
        break;

      case NODE_IDS:
        if (value == null) {
          unsetNodeIds();
        } else {
          setNodeIds((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREE_ID:
        return Long.valueOf(getTreeId());

      case NODE_IDS:
        return getNodeIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREE_ID:
        return isSetTreeId();
      case NODE_IDS:
        return isSetNodeIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTreeNodes_args)
        return this.equals((deleteTreeNodes_args)that);
      return false;
    }

    public boolean equals(deleteTreeNodes_args that) {
      if (that == null)
        return false;

      boolean this_present_treeId = true;
      boolean that_present_treeId = true;
      if (this_present_treeId || that_present_treeId) {
        if (!(this_present_treeId && that_present_treeId))
          return false;
        if (this.treeId != that.treeId)
          return false;
      }

      boolean this_present_nodeIds = true && this.isSetNodeIds();
      boolean that_present_nodeIds = true && that.isSetNodeIds();
      if (this_present_nodeIds || that_present_nodeIds) {
        if (!(this_present_nodeIds && that_present_nodeIds))
          return false;
        if (!this.nodeIds.equals(that.nodeIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteTreeNodes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteTreeNodes_args typedOther = (deleteTreeNodes_args)other;

      lastComparison = Boolean.valueOf(isSetTreeId()).compareTo(typedOther.isSetTreeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTreeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treeId, typedOther.treeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodeIds()).compareTo(typedOther.isSetNodeIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeIds, typedOther.nodeIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteTreeNodes_args(");
      boolean first = true;

      sb.append("treeId:");
      sb.append(this.treeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeIds:");
      if (this.nodeIds == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteTreeNodes_argsStandardSchemeFactory implements SchemeFactory {
      public deleteTreeNodes_argsStandardScheme getScheme() {
        return new deleteTreeNodes_argsStandardScheme();
      }
    }

    private static class deleteTreeNodes_argsStandardScheme extends StandardScheme<deleteTreeNodes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteTreeNodes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.treeId = iprot.readI64();
                struct.setTreeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODE_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                  struct.nodeIds = new ArrayList<Integer>(_list42.size);
                  for (int _i43 = 0; _i43 < _list42.size; ++_i43)
                  {
                    int _elem44; // required
                    _elem44 = iprot.readI32();
                    struct.nodeIds.add(_elem44);
                  }
                  iprot.readListEnd();
                }
                struct.setNodeIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteTreeNodes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TREE_ID_FIELD_DESC);
        oprot.writeI64(struct.treeId);
        oprot.writeFieldEnd();
        if (struct.nodeIds != null) {
          oprot.writeFieldBegin(NODE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.nodeIds.size()));
            for (int _iter45 : struct.nodeIds)
            {
              oprot.writeI32(_iter45);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteTreeNodes_argsTupleSchemeFactory implements SchemeFactory {
      public deleteTreeNodes_argsTupleScheme getScheme() {
        return new deleteTreeNodes_argsTupleScheme();
      }
    }

    private static class deleteTreeNodes_argsTupleScheme extends TupleScheme<deleteTreeNodes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteTreeNodes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTreeId()) {
          optionals.set(0);
        }
        if (struct.isSetNodeIds()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTreeId()) {
          oprot.writeI64(struct.treeId);
        }
        if (struct.isSetNodeIds()) {
          {
            oprot.writeI32(struct.nodeIds.size());
            for (int _iter46 : struct.nodeIds)
            {
              oprot.writeI32(_iter46);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteTreeNodes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.treeId = iprot.readI64();
          struct.setTreeIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.nodeIds = new ArrayList<Integer>(_list47.size);
            for (int _i48 = 0; _i48 < _list47.size; ++_i48)
            {
              int _elem49; // required
              _elem49 = iprot.readI32();
              struct.nodeIds.add(_elem49);
            }
          }
          struct.setNodeIdsIsSet(true);
        }
      }
    }

  }

  public static class deleteTreeNodes_result implements org.apache.thrift.TBase<deleteTreeNodes_result, deleteTreeNodes_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTreeNodes_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteTreeNodes_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteTreeNodes_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteTreeNodes_result.class, metaDataMap);
    }

    public deleteTreeNodes_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteTreeNodes_result(deleteTreeNodes_result other) {
    }

    public deleteTreeNodes_result deepCopy() {
      return new deleteTreeNodes_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTreeNodes_result)
        return this.equals((deleteTreeNodes_result)that);
      return false;
    }

    public boolean equals(deleteTreeNodes_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteTreeNodes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteTreeNodes_result typedOther = (deleteTreeNodes_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteTreeNodes_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteTreeNodes_resultStandardSchemeFactory implements SchemeFactory {
      public deleteTreeNodes_resultStandardScheme getScheme() {
        return new deleteTreeNodes_resultStandardScheme();
      }
    }

    private static class deleteTreeNodes_resultStandardScheme extends StandardScheme<deleteTreeNodes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteTreeNodes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteTreeNodes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteTreeNodes_resultTupleSchemeFactory implements SchemeFactory {
      public deleteTreeNodes_resultTupleScheme getScheme() {
        return new deleteTreeNodes_resultTupleScheme();
      }
    }

    private static class deleteTreeNodes_resultTupleScheme extends TupleScheme<deleteTreeNodes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteTreeNodes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteTreeNodes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class submitRebuildRequest_args implements org.apache.thrift.TBase<submitRebuildRequest_args, submitRebuildRequest_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitRebuildRequest_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitRebuildRequest_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitRebuildRequest_argsTupleSchemeFactory());
    }

    public RebuildHashTreeRequest request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RebuildHashTreeRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitRebuildRequest_args.class, metaDataMap);
    }

    public submitRebuildRequest_args() {
    }

    public submitRebuildRequest_args(
      RebuildHashTreeRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitRebuildRequest_args(submitRebuildRequest_args other) {
      if (other.isSetRequest()) {
        this.request = new RebuildHashTreeRequest(other.request);
      }
    }

    public submitRebuildRequest_args deepCopy() {
      return new submitRebuildRequest_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public RebuildHashTreeRequest getRequest() {
      return this.request;
    }

    public submitRebuildRequest_args setRequest(RebuildHashTreeRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((RebuildHashTreeRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitRebuildRequest_args)
        return this.equals((submitRebuildRequest_args)that);
      return false;
    }

    public boolean equals(submitRebuildRequest_args that) {
      if (that == null)
        return false;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(submitRebuildRequest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      submitRebuildRequest_args typedOther = (submitRebuildRequest_args)other;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, typedOther.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitRebuildRequest_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitRebuildRequest_argsStandardSchemeFactory implements SchemeFactory {
      public submitRebuildRequest_argsStandardScheme getScheme() {
        return new submitRebuildRequest_argsStandardScheme();
      }
    }

    private static class submitRebuildRequest_argsStandardScheme extends StandardScheme<submitRebuildRequest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitRebuildRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new RebuildHashTreeRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitRebuildRequest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitRebuildRequest_argsTupleSchemeFactory implements SchemeFactory {
      public submitRebuildRequest_argsTupleScheme getScheme() {
        return new submitRebuildRequest_argsTupleScheme();
      }
    }

    private static class submitRebuildRequest_argsTupleScheme extends TupleScheme<submitRebuildRequest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitRebuildRequest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitRebuildRequest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new RebuildHashTreeRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class submitRebuildRequest_result implements org.apache.thrift.TBase<submitRebuildRequest_result, submitRebuildRequest_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitRebuildRequest_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitRebuildRequest_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitRebuildRequest_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitRebuildRequest_result.class, metaDataMap);
    }

    public submitRebuildRequest_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitRebuildRequest_result(submitRebuildRequest_result other) {
    }

    public submitRebuildRequest_result deepCopy() {
      return new submitRebuildRequest_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitRebuildRequest_result)
        return this.equals((submitRebuildRequest_result)that);
      return false;
    }

    public boolean equals(submitRebuildRequest_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(submitRebuildRequest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      submitRebuildRequest_result typedOther = (submitRebuildRequest_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitRebuildRequest_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitRebuildRequest_resultStandardSchemeFactory implements SchemeFactory {
      public submitRebuildRequest_resultStandardScheme getScheme() {
        return new submitRebuildRequest_resultStandardScheme();
      }
    }

    private static class submitRebuildRequest_resultStandardScheme extends StandardScheme<submitRebuildRequest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitRebuildRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitRebuildRequest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitRebuildRequest_resultTupleSchemeFactory implements SchemeFactory {
      public submitRebuildRequest_resultTupleScheme getScheme() {
        return new submitRebuildRequest_resultTupleScheme();
      }
    }

    private static class submitRebuildRequest_resultTupleScheme extends TupleScheme<submitRebuildRequest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitRebuildRequest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitRebuildRequest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class submitRebuildResponse_args implements org.apache.thrift.TBase<submitRebuildResponse_args, submitRebuildResponse_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitRebuildResponse_args");

    private static final org.apache.thrift.protocol.TField RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("response", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitRebuildResponse_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitRebuildResponse_argsTupleSchemeFactory());
    }

    public RebuildHashTreeResponse response; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESPONSE((short)1, "response");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESPONSE
            return RESPONSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("response", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RebuildHashTreeResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitRebuildResponse_args.class, metaDataMap);
    }

    public submitRebuildResponse_args() {
    }

    public submitRebuildResponse_args(
      RebuildHashTreeResponse response)
    {
      this();
      this.response = response;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitRebuildResponse_args(submitRebuildResponse_args other) {
      if (other.isSetResponse()) {
        this.response = new RebuildHashTreeResponse(other.response);
      }
    }

    public submitRebuildResponse_args deepCopy() {
      return new submitRebuildResponse_args(this);
    }

    @Override
    public void clear() {
      this.response = null;
    }

    public RebuildHashTreeResponse getResponse() {
      return this.response;
    }

    public submitRebuildResponse_args setResponse(RebuildHashTreeResponse response) {
      this.response = response;
      return this;
    }

    public void unsetResponse() {
      this.response = null;
    }

    /** Returns true if field response is set (has been assigned a value) and false otherwise */
    public boolean isSetResponse() {
      return this.response != null;
    }

    public void setResponseIsSet(boolean value) {
      if (!value) {
        this.response = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RESPONSE:
        if (value == null) {
          unsetResponse();
        } else {
          setResponse((RebuildHashTreeResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RESPONSE:
        return getResponse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RESPONSE:
        return isSetResponse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitRebuildResponse_args)
        return this.equals((submitRebuildResponse_args)that);
      return false;
    }

    public boolean equals(submitRebuildResponse_args that) {
      if (that == null)
        return false;

      boolean this_present_response = true && this.isSetResponse();
      boolean that_present_response = true && that.isSetResponse();
      if (this_present_response || that_present_response) {
        if (!(this_present_response && that_present_response))
          return false;
        if (!this.response.equals(that.response))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(submitRebuildResponse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      submitRebuildResponse_args typedOther = (submitRebuildResponse_args)other;

      lastComparison = Boolean.valueOf(isSetResponse()).compareTo(typedOther.isSetResponse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResponse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.response, typedOther.response);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitRebuildResponse_args(");
      boolean first = true;

      sb.append("response:");
      if (this.response == null) {
        sb.append("null");
      } else {
        sb.append(this.response);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitRebuildResponse_argsStandardSchemeFactory implements SchemeFactory {
      public submitRebuildResponse_argsStandardScheme getScheme() {
        return new submitRebuildResponse_argsStandardScheme();
      }
    }

    private static class submitRebuildResponse_argsStandardScheme extends StandardScheme<submitRebuildResponse_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitRebuildResponse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RESPONSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.response = new RebuildHashTreeResponse();
                struct.response.read(iprot);
                struct.setResponseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitRebuildResponse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.response != null) {
          oprot.writeFieldBegin(RESPONSE_FIELD_DESC);
          struct.response.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitRebuildResponse_argsTupleSchemeFactory implements SchemeFactory {
      public submitRebuildResponse_argsTupleScheme getScheme() {
        return new submitRebuildResponse_argsTupleScheme();
      }
    }

    private static class submitRebuildResponse_argsTupleScheme extends TupleScheme<submitRebuildResponse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitRebuildResponse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetResponse()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetResponse()) {
          struct.response.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitRebuildResponse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.response = new RebuildHashTreeResponse();
          struct.response.read(iprot);
          struct.setResponseIsSet(true);
        }
      }
    }

  }

  public static class submitRebuildResponse_result implements org.apache.thrift.TBase<submitRebuildResponse_result, submitRebuildResponse_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitRebuildResponse_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitRebuildResponse_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitRebuildResponse_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitRebuildResponse_result.class, metaDataMap);
    }

    public submitRebuildResponse_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitRebuildResponse_result(submitRebuildResponse_result other) {
    }

    public submitRebuildResponse_result deepCopy() {
      return new submitRebuildResponse_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitRebuildResponse_result)
        return this.equals((submitRebuildResponse_result)that);
      return false;
    }

    public boolean equals(submitRebuildResponse_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(submitRebuildResponse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      submitRebuildResponse_result typedOther = (submitRebuildResponse_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitRebuildResponse_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitRebuildResponse_resultStandardSchemeFactory implements SchemeFactory {
      public submitRebuildResponse_resultStandardScheme getScheme() {
        return new submitRebuildResponse_resultStandardScheme();
      }
    }

    private static class submitRebuildResponse_resultStandardScheme extends StandardScheme<submitRebuildResponse_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitRebuildResponse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitRebuildResponse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitRebuildResponse_resultTupleSchemeFactory implements SchemeFactory {
      public submitRebuildResponse_resultTupleScheme getScheme() {
        return new submitRebuildResponse_resultTupleScheme();
      }
    }

    private static class submitRebuildResponse_resultTupleScheme extends TupleScheme<submitRebuildResponse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitRebuildResponse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitRebuildResponse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class addServerNameAndTreeIdToSyncList_args implements org.apache.thrift.TBase<addServerNameAndTreeIdToSyncList_args, addServerNameAndTreeIdToSyncList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addServerNameAndTreeIdToSyncList_args");

    private static final org.apache.thrift.protocol.TField SN_FIELD_DESC = new org.apache.thrift.protocol.TField("sn", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TREE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("treeId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addServerNameAndTreeIdToSyncList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addServerNameAndTreeIdToSyncList_argsTupleSchemeFactory());
    }

    public ServerName sn; // required
    public long treeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SN((short)1, "sn"),
      TREE_ID((short)2, "treeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SN
            return SN;
          case 2: // TREE_ID
            return TREE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TREEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SN, new org.apache.thrift.meta_data.FieldMetaData("sn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServerName.class)));
      tmpMap.put(_Fields.TREE_ID, new org.apache.thrift.meta_data.FieldMetaData("treeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addServerNameAndTreeIdToSyncList_args.class, metaDataMap);
    }

    public addServerNameAndTreeIdToSyncList_args() {
    }

    public addServerNameAndTreeIdToSyncList_args(
      ServerName sn,
      long treeId)
    {
      this();
      this.sn = sn;
      this.treeId = treeId;
      setTreeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addServerNameAndTreeIdToSyncList_args(addServerNameAndTreeIdToSyncList_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetSn()) {
        this.sn = new ServerName(other.sn);
      }
      this.treeId = other.treeId;
    }

    public addServerNameAndTreeIdToSyncList_args deepCopy() {
      return new addServerNameAndTreeIdToSyncList_args(this);
    }

    @Override
    public void clear() {
      this.sn = null;
      setTreeIdIsSet(false);
      this.treeId = 0;
    }

    public ServerName getSn() {
      return this.sn;
    }

    public addServerNameAndTreeIdToSyncList_args setSn(ServerName sn) {
      this.sn = sn;
      return this;
    }

    public void unsetSn() {
      this.sn = null;
    }

    /** Returns true if field sn is set (has been assigned a value) and false otherwise */
    public boolean isSetSn() {
      return this.sn != null;
    }

    public void setSnIsSet(boolean value) {
      if (!value) {
        this.sn = null;
      }
    }

    public long getTreeId() {
      return this.treeId;
    }

    public addServerNameAndTreeIdToSyncList_args setTreeId(long treeId) {
      this.treeId = treeId;
      setTreeIdIsSet(true);
      return this;
    }

    public void unsetTreeId() {
      __isset_bit_vector.clear(__TREEID_ISSET_ID);
    }

    /** Returns true if field treeId is set (has been assigned a value) and false otherwise */
    public boolean isSetTreeId() {
      return __isset_bit_vector.get(__TREEID_ISSET_ID);
    }

    public void setTreeIdIsSet(boolean value) {
      __isset_bit_vector.set(__TREEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SN:
        if (value == null) {
          unsetSn();
        } else {
          setSn((ServerName)value);
        }
        break;

      case TREE_ID:
        if (value == null) {
          unsetTreeId();
        } else {
          setTreeId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SN:
        return getSn();

      case TREE_ID:
        return Long.valueOf(getTreeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SN:
        return isSetSn();
      case TREE_ID:
        return isSetTreeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addServerNameAndTreeIdToSyncList_args)
        return this.equals((addServerNameAndTreeIdToSyncList_args)that);
      return false;
    }

    public boolean equals(addServerNameAndTreeIdToSyncList_args that) {
      if (that == null)
        return false;

      boolean this_present_sn = true && this.isSetSn();
      boolean that_present_sn = true && that.isSetSn();
      if (this_present_sn || that_present_sn) {
        if (!(this_present_sn && that_present_sn))
          return false;
        if (!this.sn.equals(that.sn))
          return false;
      }

      boolean this_present_treeId = true;
      boolean that_present_treeId = true;
      if (this_present_treeId || that_present_treeId) {
        if (!(this_present_treeId && that_present_treeId))
          return false;
        if (this.treeId != that.treeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addServerNameAndTreeIdToSyncList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addServerNameAndTreeIdToSyncList_args typedOther = (addServerNameAndTreeIdToSyncList_args)other;

      lastComparison = Boolean.valueOf(isSetSn()).compareTo(typedOther.isSetSn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sn, typedOther.sn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTreeId()).compareTo(typedOther.isSetTreeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTreeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treeId, typedOther.treeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addServerNameAndTreeIdToSyncList_args(");
      boolean first = true;

      sb.append("sn:");
      if (this.sn == null) {
        sb.append("null");
      } else {
        sb.append(this.sn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("treeId:");
      sb.append(this.treeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addServerNameAndTreeIdToSyncList_argsStandardSchemeFactory implements SchemeFactory {
      public addServerNameAndTreeIdToSyncList_argsStandardScheme getScheme() {
        return new addServerNameAndTreeIdToSyncList_argsStandardScheme();
      }
    }

    private static class addServerNameAndTreeIdToSyncList_argsStandardScheme extends StandardScheme<addServerNameAndTreeIdToSyncList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addServerNameAndTreeIdToSyncList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sn = new ServerName();
                struct.sn.read(iprot);
                struct.setSnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TREE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.treeId = iprot.readI64();
                struct.setTreeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addServerNameAndTreeIdToSyncList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sn != null) {
          oprot.writeFieldBegin(SN_FIELD_DESC);
          struct.sn.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TREE_ID_FIELD_DESC);
        oprot.writeI64(struct.treeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addServerNameAndTreeIdToSyncList_argsTupleSchemeFactory implements SchemeFactory {
      public addServerNameAndTreeIdToSyncList_argsTupleScheme getScheme() {
        return new addServerNameAndTreeIdToSyncList_argsTupleScheme();
      }
    }

    private static class addServerNameAndTreeIdToSyncList_argsTupleScheme extends TupleScheme<addServerNameAndTreeIdToSyncList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addServerNameAndTreeIdToSyncList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSn()) {
          optionals.set(0);
        }
        if (struct.isSetTreeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSn()) {
          struct.sn.write(oprot);
        }
        if (struct.isSetTreeId()) {
          oprot.writeI64(struct.treeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addServerNameAndTreeIdToSyncList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sn = new ServerName();
          struct.sn.read(iprot);
          struct.setSnIsSet(true);
        }
        if (incoming.get(1)) {
          struct.treeId = iprot.readI64();
          struct.setTreeIdIsSet(true);
        }
      }
    }

  }

  public static class addServerNameAndTreeIdToSyncList_result implements org.apache.thrift.TBase<addServerNameAndTreeIdToSyncList_result, addServerNameAndTreeIdToSyncList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addServerNameAndTreeIdToSyncList_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addServerNameAndTreeIdToSyncList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addServerNameAndTreeIdToSyncList_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addServerNameAndTreeIdToSyncList_result.class, metaDataMap);
    }

    public addServerNameAndTreeIdToSyncList_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addServerNameAndTreeIdToSyncList_result(addServerNameAndTreeIdToSyncList_result other) {
    }

    public addServerNameAndTreeIdToSyncList_result deepCopy() {
      return new addServerNameAndTreeIdToSyncList_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addServerNameAndTreeIdToSyncList_result)
        return this.equals((addServerNameAndTreeIdToSyncList_result)that);
      return false;
    }

    public boolean equals(addServerNameAndTreeIdToSyncList_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addServerNameAndTreeIdToSyncList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addServerNameAndTreeIdToSyncList_result typedOther = (addServerNameAndTreeIdToSyncList_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addServerNameAndTreeIdToSyncList_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addServerNameAndTreeIdToSyncList_resultStandardSchemeFactory implements SchemeFactory {
      public addServerNameAndTreeIdToSyncList_resultStandardScheme getScheme() {
        return new addServerNameAndTreeIdToSyncList_resultStandardScheme();
      }
    }

    private static class addServerNameAndTreeIdToSyncList_resultStandardScheme extends StandardScheme<addServerNameAndTreeIdToSyncList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addServerNameAndTreeIdToSyncList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addServerNameAndTreeIdToSyncList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addServerNameAndTreeIdToSyncList_resultTupleSchemeFactory implements SchemeFactory {
      public addServerNameAndTreeIdToSyncList_resultTupleScheme getScheme() {
        return new addServerNameAndTreeIdToSyncList_resultTupleScheme();
      }
    }

    private static class addServerNameAndTreeIdToSyncList_resultTupleScheme extends TupleScheme<addServerNameAndTreeIdToSyncList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addServerNameAndTreeIdToSyncList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addServerNameAndTreeIdToSyncList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class removeServerNameAndTreeIdFromSyncList_args implements org.apache.thrift.TBase<removeServerNameAndTreeIdFromSyncList_args, removeServerNameAndTreeIdFromSyncList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeServerNameAndTreeIdFromSyncList_args");

    private static final org.apache.thrift.protocol.TField SN_FIELD_DESC = new org.apache.thrift.protocol.TField("sn", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TREE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("treeId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeServerNameAndTreeIdFromSyncList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeServerNameAndTreeIdFromSyncList_argsTupleSchemeFactory());
    }

    public ServerName sn; // required
    public long treeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SN((short)1, "sn"),
      TREE_ID((short)2, "treeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SN
            return SN;
          case 2: // TREE_ID
            return TREE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TREEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SN, new org.apache.thrift.meta_data.FieldMetaData("sn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServerName.class)));
      tmpMap.put(_Fields.TREE_ID, new org.apache.thrift.meta_data.FieldMetaData("treeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeServerNameAndTreeIdFromSyncList_args.class, metaDataMap);
    }

    public removeServerNameAndTreeIdFromSyncList_args() {
    }

    public removeServerNameAndTreeIdFromSyncList_args(
      ServerName sn,
      long treeId)
    {
      this();
      this.sn = sn;
      this.treeId = treeId;
      setTreeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeServerNameAndTreeIdFromSyncList_args(removeServerNameAndTreeIdFromSyncList_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetSn()) {
        this.sn = new ServerName(other.sn);
      }
      this.treeId = other.treeId;
    }

    public removeServerNameAndTreeIdFromSyncList_args deepCopy() {
      return new removeServerNameAndTreeIdFromSyncList_args(this);
    }

    @Override
    public void clear() {
      this.sn = null;
      setTreeIdIsSet(false);
      this.treeId = 0;
    }

    public ServerName getSn() {
      return this.sn;
    }

    public removeServerNameAndTreeIdFromSyncList_args setSn(ServerName sn) {
      this.sn = sn;
      return this;
    }

    public void unsetSn() {
      this.sn = null;
    }

    /** Returns true if field sn is set (has been assigned a value) and false otherwise */
    public boolean isSetSn() {
      return this.sn != null;
    }

    public void setSnIsSet(boolean value) {
      if (!value) {
        this.sn = null;
      }
    }

    public long getTreeId() {
      return this.treeId;
    }

    public removeServerNameAndTreeIdFromSyncList_args setTreeId(long treeId) {
      this.treeId = treeId;
      setTreeIdIsSet(true);
      return this;
    }

    public void unsetTreeId() {
      __isset_bit_vector.clear(__TREEID_ISSET_ID);
    }

    /** Returns true if field treeId is set (has been assigned a value) and false otherwise */
    public boolean isSetTreeId() {
      return __isset_bit_vector.get(__TREEID_ISSET_ID);
    }

    public void setTreeIdIsSet(boolean value) {
      __isset_bit_vector.set(__TREEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SN:
        if (value == null) {
          unsetSn();
        } else {
          setSn((ServerName)value);
        }
        break;

      case TREE_ID:
        if (value == null) {
          unsetTreeId();
        } else {
          setTreeId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SN:
        return getSn();

      case TREE_ID:
        return Long.valueOf(getTreeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SN:
        return isSetSn();
      case TREE_ID:
        return isSetTreeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeServerNameAndTreeIdFromSyncList_args)
        return this.equals((removeServerNameAndTreeIdFromSyncList_args)that);
      return false;
    }

    public boolean equals(removeServerNameAndTreeIdFromSyncList_args that) {
      if (that == null)
        return false;

      boolean this_present_sn = true && this.isSetSn();
      boolean that_present_sn = true && that.isSetSn();
      if (this_present_sn || that_present_sn) {
        if (!(this_present_sn && that_present_sn))
          return false;
        if (!this.sn.equals(that.sn))
          return false;
      }

      boolean this_present_treeId = true;
      boolean that_present_treeId = true;
      if (this_present_treeId || that_present_treeId) {
        if (!(this_present_treeId && that_present_treeId))
          return false;
        if (this.treeId != that.treeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeServerNameAndTreeIdFromSyncList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeServerNameAndTreeIdFromSyncList_args typedOther = (removeServerNameAndTreeIdFromSyncList_args)other;

      lastComparison = Boolean.valueOf(isSetSn()).compareTo(typedOther.isSetSn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sn, typedOther.sn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTreeId()).compareTo(typedOther.isSetTreeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTreeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treeId, typedOther.treeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeServerNameAndTreeIdFromSyncList_args(");
      boolean first = true;

      sb.append("sn:");
      if (this.sn == null) {
        sb.append("null");
      } else {
        sb.append(this.sn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("treeId:");
      sb.append(this.treeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeServerNameAndTreeIdFromSyncList_argsStandardSchemeFactory implements SchemeFactory {
      public removeServerNameAndTreeIdFromSyncList_argsStandardScheme getScheme() {
        return new removeServerNameAndTreeIdFromSyncList_argsStandardScheme();
      }
    }

    private static class removeServerNameAndTreeIdFromSyncList_argsStandardScheme extends StandardScheme<removeServerNameAndTreeIdFromSyncList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeServerNameAndTreeIdFromSyncList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sn = new ServerName();
                struct.sn.read(iprot);
                struct.setSnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TREE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.treeId = iprot.readI64();
                struct.setTreeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeServerNameAndTreeIdFromSyncList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sn != null) {
          oprot.writeFieldBegin(SN_FIELD_DESC);
          struct.sn.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TREE_ID_FIELD_DESC);
        oprot.writeI64(struct.treeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeServerNameAndTreeIdFromSyncList_argsTupleSchemeFactory implements SchemeFactory {
      public removeServerNameAndTreeIdFromSyncList_argsTupleScheme getScheme() {
        return new removeServerNameAndTreeIdFromSyncList_argsTupleScheme();
      }
    }

    private static class removeServerNameAndTreeIdFromSyncList_argsTupleScheme extends TupleScheme<removeServerNameAndTreeIdFromSyncList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeServerNameAndTreeIdFromSyncList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSn()) {
          optionals.set(0);
        }
        if (struct.isSetTreeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSn()) {
          struct.sn.write(oprot);
        }
        if (struct.isSetTreeId()) {
          oprot.writeI64(struct.treeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeServerNameAndTreeIdFromSyncList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sn = new ServerName();
          struct.sn.read(iprot);
          struct.setSnIsSet(true);
        }
        if (incoming.get(1)) {
          struct.treeId = iprot.readI64();
          struct.setTreeIdIsSet(true);
        }
      }
    }

  }

  public static class removeServerNameAndTreeIdFromSyncList_result implements org.apache.thrift.TBase<removeServerNameAndTreeIdFromSyncList_result, removeServerNameAndTreeIdFromSyncList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeServerNameAndTreeIdFromSyncList_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeServerNameAndTreeIdFromSyncList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeServerNameAndTreeIdFromSyncList_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeServerNameAndTreeIdFromSyncList_result.class, metaDataMap);
    }

    public removeServerNameAndTreeIdFromSyncList_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeServerNameAndTreeIdFromSyncList_result(removeServerNameAndTreeIdFromSyncList_result other) {
    }

    public removeServerNameAndTreeIdFromSyncList_result deepCopy() {
      return new removeServerNameAndTreeIdFromSyncList_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeServerNameAndTreeIdFromSyncList_result)
        return this.equals((removeServerNameAndTreeIdFromSyncList_result)that);
      return false;
    }

    public boolean equals(removeServerNameAndTreeIdFromSyncList_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeServerNameAndTreeIdFromSyncList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeServerNameAndTreeIdFromSyncList_result typedOther = (removeServerNameAndTreeIdFromSyncList_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeServerNameAndTreeIdFromSyncList_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeServerNameAndTreeIdFromSyncList_resultStandardSchemeFactory implements SchemeFactory {
      public removeServerNameAndTreeIdFromSyncList_resultStandardScheme getScheme() {
        return new removeServerNameAndTreeIdFromSyncList_resultStandardScheme();
      }
    }

    private static class removeServerNameAndTreeIdFromSyncList_resultStandardScheme extends StandardScheme<removeServerNameAndTreeIdFromSyncList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeServerNameAndTreeIdFromSyncList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeServerNameAndTreeIdFromSyncList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeServerNameAndTreeIdFromSyncList_resultTupleSchemeFactory implements SchemeFactory {
      public removeServerNameAndTreeIdFromSyncList_resultTupleScheme getScheme() {
        return new removeServerNameAndTreeIdFromSyncList_resultTupleScheme();
      }
    }

    private static class removeServerNameAndTreeIdFromSyncList_resultTupleScheme extends TupleScheme<removeServerNameAndTreeIdFromSyncList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeServerNameAndTreeIdFromSyncList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeServerNameAndTreeIdFromSyncList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getServerNameListFor_args implements org.apache.thrift.TBase<getServerNameListFor_args, getServerNameListFor_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getServerNameListFor_args");

    private static final org.apache.thrift.protocol.TField TREE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("treeId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getServerNameListFor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getServerNameListFor_argsTupleSchemeFactory());
    }

    public long treeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREE_ID((short)1, "treeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREE_ID
            return TREE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TREEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREE_ID, new org.apache.thrift.meta_data.FieldMetaData("treeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getServerNameListFor_args.class, metaDataMap);
    }

    public getServerNameListFor_args() {
    }

    public getServerNameListFor_args(
      long treeId)
    {
      this();
      this.treeId = treeId;
      setTreeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getServerNameListFor_args(getServerNameListFor_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.treeId = other.treeId;
    }

    public getServerNameListFor_args deepCopy() {
      return new getServerNameListFor_args(this);
    }

    @Override
    public void clear() {
      setTreeIdIsSet(false);
      this.treeId = 0;
    }

    public long getTreeId() {
      return this.treeId;
    }

    public getServerNameListFor_args setTreeId(long treeId) {
      this.treeId = treeId;
      setTreeIdIsSet(true);
      return this;
    }

    public void unsetTreeId() {
      __isset_bit_vector.clear(__TREEID_ISSET_ID);
    }

    /** Returns true if field treeId is set (has been assigned a value) and false otherwise */
    public boolean isSetTreeId() {
      return __isset_bit_vector.get(__TREEID_ISSET_ID);
    }

    public void setTreeIdIsSet(boolean value) {
      __isset_bit_vector.set(__TREEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREE_ID:
        if (value == null) {
          unsetTreeId();
        } else {
          setTreeId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREE_ID:
        return Long.valueOf(getTreeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREE_ID:
        return isSetTreeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getServerNameListFor_args)
        return this.equals((getServerNameListFor_args)that);
      return false;
    }

    public boolean equals(getServerNameListFor_args that) {
      if (that == null)
        return false;

      boolean this_present_treeId = true;
      boolean that_present_treeId = true;
      if (this_present_treeId || that_present_treeId) {
        if (!(this_present_treeId && that_present_treeId))
          return false;
        if (this.treeId != that.treeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getServerNameListFor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getServerNameListFor_args typedOther = (getServerNameListFor_args)other;

      lastComparison = Boolean.valueOf(isSetTreeId()).compareTo(typedOther.isSetTreeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTreeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treeId, typedOther.treeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getServerNameListFor_args(");
      boolean first = true;

      sb.append("treeId:");
      sb.append(this.treeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getServerNameListFor_argsStandardSchemeFactory implements SchemeFactory {
      public getServerNameListFor_argsStandardScheme getScheme() {
        return new getServerNameListFor_argsStandardScheme();
      }
    }

    private static class getServerNameListFor_argsStandardScheme extends StandardScheme<getServerNameListFor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getServerNameListFor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.treeId = iprot.readI64();
                struct.setTreeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getServerNameListFor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TREE_ID_FIELD_DESC);
        oprot.writeI64(struct.treeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getServerNameListFor_argsTupleSchemeFactory implements SchemeFactory {
      public getServerNameListFor_argsTupleScheme getScheme() {
        return new getServerNameListFor_argsTupleScheme();
      }
    }

    private static class getServerNameListFor_argsTupleScheme extends TupleScheme<getServerNameListFor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getServerNameListFor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTreeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTreeId()) {
          oprot.writeI64(struct.treeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getServerNameListFor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.treeId = iprot.readI64();
          struct.setTreeIdIsSet(true);
        }
      }
    }

  }

  public static class getServerNameListFor_result implements org.apache.thrift.TBase<getServerNameListFor_result, getServerNameListFor_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getServerNameListFor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getServerNameListFor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getServerNameListFor_resultTupleSchemeFactory());
    }

    public List<ServerName> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServerName.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getServerNameListFor_result.class, metaDataMap);
    }

    public getServerNameListFor_result() {
    }

    public getServerNameListFor_result(
      List<ServerName> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getServerNameListFor_result(getServerNameListFor_result other) {
      if (other.isSetSuccess()) {
        List<ServerName> __this__success = new ArrayList<ServerName>();
        for (ServerName other_element : other.success) {
          __this__success.add(new ServerName(other_element));
        }
        this.success = __this__success;
      }
    }

    public getServerNameListFor_result deepCopy() {
      return new getServerNameListFor_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ServerName> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ServerName elem) {
      if (this.success == null) {
        this.success = new ArrayList<ServerName>();
      }
      this.success.add(elem);
    }

    public List<ServerName> getSuccess() {
      return this.success;
    }

    public getServerNameListFor_result setSuccess(List<ServerName> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ServerName>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getServerNameListFor_result)
        return this.equals((getServerNameListFor_result)that);
      return false;
    }

    public boolean equals(getServerNameListFor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getServerNameListFor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getServerNameListFor_result typedOther = (getServerNameListFor_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getServerNameListFor_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getServerNameListFor_resultStandardSchemeFactory implements SchemeFactory {
      public getServerNameListFor_resultStandardScheme getScheme() {
        return new getServerNameListFor_resultStandardScheme();
      }
    }

    private static class getServerNameListFor_resultStandardScheme extends StandardScheme<getServerNameListFor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getServerNameListFor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                  struct.success = new ArrayList<ServerName>(_list50.size);
                  for (int _i51 = 0; _i51 < _list50.size; ++_i51)
                  {
                    ServerName _elem52; // required
                    _elem52 = new ServerName();
                    _elem52.read(iprot);
                    struct.success.add(_elem52);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getServerNameListFor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ServerName _iter53 : struct.success)
            {
              _iter53.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getServerNameListFor_resultTupleSchemeFactory implements SchemeFactory {
      public getServerNameListFor_resultTupleScheme getScheme() {
        return new getServerNameListFor_resultTupleScheme();
      }
    }

    private static class getServerNameListFor_resultTupleScheme extends TupleScheme<getServerNameListFor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getServerNameListFor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ServerName _iter54 : struct.success)
            {
              _iter54.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getServerNameListFor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ServerName>(_list55.size);
            for (int _i56 = 0; _i56 < _list55.size; ++_i56)
            {
              ServerName _elem57; // required
              _elem57 = new ServerName();
              _elem57.read(iprot);
              struct.success.add(_elem57);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addServerNameToSyncList_args implements org.apache.thrift.TBase<addServerNameToSyncList_args, addServerNameToSyncList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addServerNameToSyncList_args");

    private static final org.apache.thrift.protocol.TField SN_FIELD_DESC = new org.apache.thrift.protocol.TField("sn", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addServerNameToSyncList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addServerNameToSyncList_argsTupleSchemeFactory());
    }

    public ServerName sn; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SN((short)1, "sn");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SN
            return SN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SN, new org.apache.thrift.meta_data.FieldMetaData("sn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServerName.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addServerNameToSyncList_args.class, metaDataMap);
    }

    public addServerNameToSyncList_args() {
    }

    public addServerNameToSyncList_args(
      ServerName sn)
    {
      this();
      this.sn = sn;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addServerNameToSyncList_args(addServerNameToSyncList_args other) {
      if (other.isSetSn()) {
        this.sn = new ServerName(other.sn);
      }
    }

    public addServerNameToSyncList_args deepCopy() {
      return new addServerNameToSyncList_args(this);
    }

    @Override
    public void clear() {
      this.sn = null;
    }

    public ServerName getSn() {
      return this.sn;
    }

    public addServerNameToSyncList_args setSn(ServerName sn) {
      this.sn = sn;
      return this;
    }

    public void unsetSn() {
      this.sn = null;
    }

    /** Returns true if field sn is set (has been assigned a value) and false otherwise */
    public boolean isSetSn() {
      return this.sn != null;
    }

    public void setSnIsSet(boolean value) {
      if (!value) {
        this.sn = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SN:
        if (value == null) {
          unsetSn();
        } else {
          setSn((ServerName)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SN:
        return getSn();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SN:
        return isSetSn();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addServerNameToSyncList_args)
        return this.equals((addServerNameToSyncList_args)that);
      return false;
    }

    public boolean equals(addServerNameToSyncList_args that) {
      if (that == null)
        return false;

      boolean this_present_sn = true && this.isSetSn();
      boolean that_present_sn = true && that.isSetSn();
      if (this_present_sn || that_present_sn) {
        if (!(this_present_sn && that_present_sn))
          return false;
        if (!this.sn.equals(that.sn))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addServerNameToSyncList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addServerNameToSyncList_args typedOther = (addServerNameToSyncList_args)other;

      lastComparison = Boolean.valueOf(isSetSn()).compareTo(typedOther.isSetSn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sn, typedOther.sn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addServerNameToSyncList_args(");
      boolean first = true;

      sb.append("sn:");
      if (this.sn == null) {
        sb.append("null");
      } else {
        sb.append(this.sn);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addServerNameToSyncList_argsStandardSchemeFactory implements SchemeFactory {
      public addServerNameToSyncList_argsStandardScheme getScheme() {
        return new addServerNameToSyncList_argsStandardScheme();
      }
    }

    private static class addServerNameToSyncList_argsStandardScheme extends StandardScheme<addServerNameToSyncList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addServerNameToSyncList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sn = new ServerName();
                struct.sn.read(iprot);
                struct.setSnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addServerNameToSyncList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sn != null) {
          oprot.writeFieldBegin(SN_FIELD_DESC);
          struct.sn.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addServerNameToSyncList_argsTupleSchemeFactory implements SchemeFactory {
      public addServerNameToSyncList_argsTupleScheme getScheme() {
        return new addServerNameToSyncList_argsTupleScheme();
      }
    }

    private static class addServerNameToSyncList_argsTupleScheme extends TupleScheme<addServerNameToSyncList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addServerNameToSyncList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSn()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSn()) {
          struct.sn.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addServerNameToSyncList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sn = new ServerName();
          struct.sn.read(iprot);
          struct.setSnIsSet(true);
        }
      }
    }

  }

  public static class addServerNameToSyncList_result implements org.apache.thrift.TBase<addServerNameToSyncList_result, addServerNameToSyncList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addServerNameToSyncList_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addServerNameToSyncList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addServerNameToSyncList_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addServerNameToSyncList_result.class, metaDataMap);
    }

    public addServerNameToSyncList_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addServerNameToSyncList_result(addServerNameToSyncList_result other) {
    }

    public addServerNameToSyncList_result deepCopy() {
      return new addServerNameToSyncList_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addServerNameToSyncList_result)
        return this.equals((addServerNameToSyncList_result)that);
      return false;
    }

    public boolean equals(addServerNameToSyncList_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addServerNameToSyncList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addServerNameToSyncList_result typedOther = (addServerNameToSyncList_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addServerNameToSyncList_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addServerNameToSyncList_resultStandardSchemeFactory implements SchemeFactory {
      public addServerNameToSyncList_resultStandardScheme getScheme() {
        return new addServerNameToSyncList_resultStandardScheme();
      }
    }

    private static class addServerNameToSyncList_resultStandardScheme extends StandardScheme<addServerNameToSyncList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addServerNameToSyncList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addServerNameToSyncList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addServerNameToSyncList_resultTupleSchemeFactory implements SchemeFactory {
      public addServerNameToSyncList_resultTupleScheme getScheme() {
        return new addServerNameToSyncList_resultTupleScheme();
      }
    }

    private static class addServerNameToSyncList_resultTupleScheme extends TupleScheme<addServerNameToSyncList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addServerNameToSyncList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addServerNameToSyncList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class removeServerNameFromSyncList_args implements org.apache.thrift.TBase<removeServerNameFromSyncList_args, removeServerNameFromSyncList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeServerNameFromSyncList_args");

    private static final org.apache.thrift.protocol.TField SN_FIELD_DESC = new org.apache.thrift.protocol.TField("sn", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeServerNameFromSyncList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeServerNameFromSyncList_argsTupleSchemeFactory());
    }

    public ServerName sn; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SN((short)1, "sn");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SN
            return SN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SN, new org.apache.thrift.meta_data.FieldMetaData("sn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServerName.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeServerNameFromSyncList_args.class, metaDataMap);
    }

    public removeServerNameFromSyncList_args() {
    }

    public removeServerNameFromSyncList_args(
      ServerName sn)
    {
      this();
      this.sn = sn;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeServerNameFromSyncList_args(removeServerNameFromSyncList_args other) {
      if (other.isSetSn()) {
        this.sn = new ServerName(other.sn);
      }
    }

    public removeServerNameFromSyncList_args deepCopy() {
      return new removeServerNameFromSyncList_args(this);
    }

    @Override
    public void clear() {
      this.sn = null;
    }

    public ServerName getSn() {
      return this.sn;
    }

    public removeServerNameFromSyncList_args setSn(ServerName sn) {
      this.sn = sn;
      return this;
    }

    public void unsetSn() {
      this.sn = null;
    }

    /** Returns true if field sn is set (has been assigned a value) and false otherwise */
    public boolean isSetSn() {
      return this.sn != null;
    }

    public void setSnIsSet(boolean value) {
      if (!value) {
        this.sn = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SN:
        if (value == null) {
          unsetSn();
        } else {
          setSn((ServerName)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SN:
        return getSn();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SN:
        return isSetSn();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeServerNameFromSyncList_args)
        return this.equals((removeServerNameFromSyncList_args)that);
      return false;
    }

    public boolean equals(removeServerNameFromSyncList_args that) {
      if (that == null)
        return false;

      boolean this_present_sn = true && this.isSetSn();
      boolean that_present_sn = true && that.isSetSn();
      if (this_present_sn || that_present_sn) {
        if (!(this_present_sn && that_present_sn))
          return false;
        if (!this.sn.equals(that.sn))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeServerNameFromSyncList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeServerNameFromSyncList_args typedOther = (removeServerNameFromSyncList_args)other;

      lastComparison = Boolean.valueOf(isSetSn()).compareTo(typedOther.isSetSn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sn, typedOther.sn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeServerNameFromSyncList_args(");
      boolean first = true;

      sb.append("sn:");
      if (this.sn == null) {
        sb.append("null");
      } else {
        sb.append(this.sn);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeServerNameFromSyncList_argsStandardSchemeFactory implements SchemeFactory {
      public removeServerNameFromSyncList_argsStandardScheme getScheme() {
        return new removeServerNameFromSyncList_argsStandardScheme();
      }
    }

    private static class removeServerNameFromSyncList_argsStandardScheme extends StandardScheme<removeServerNameFromSyncList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeServerNameFromSyncList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sn = new ServerName();
                struct.sn.read(iprot);
                struct.setSnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeServerNameFromSyncList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sn != null) {
          oprot.writeFieldBegin(SN_FIELD_DESC);
          struct.sn.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeServerNameFromSyncList_argsTupleSchemeFactory implements SchemeFactory {
      public removeServerNameFromSyncList_argsTupleScheme getScheme() {
        return new removeServerNameFromSyncList_argsTupleScheme();
      }
    }

    private static class removeServerNameFromSyncList_argsTupleScheme extends TupleScheme<removeServerNameFromSyncList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeServerNameFromSyncList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSn()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSn()) {
          struct.sn.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeServerNameFromSyncList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sn = new ServerName();
          struct.sn.read(iprot);
          struct.setSnIsSet(true);
        }
      }
    }

  }

  public static class removeServerNameFromSyncList_result implements org.apache.thrift.TBase<removeServerNameFromSyncList_result, removeServerNameFromSyncList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeServerNameFromSyncList_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeServerNameFromSyncList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeServerNameFromSyncList_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeServerNameFromSyncList_result.class, metaDataMap);
    }

    public removeServerNameFromSyncList_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeServerNameFromSyncList_result(removeServerNameFromSyncList_result other) {
    }

    public removeServerNameFromSyncList_result deepCopy() {
      return new removeServerNameFromSyncList_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeServerNameFromSyncList_result)
        return this.equals((removeServerNameFromSyncList_result)that);
      return false;
    }

    public boolean equals(removeServerNameFromSyncList_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeServerNameFromSyncList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeServerNameFromSyncList_result typedOther = (removeServerNameFromSyncList_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeServerNameFromSyncList_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeServerNameFromSyncList_resultStandardSchemeFactory implements SchemeFactory {
      public removeServerNameFromSyncList_resultStandardScheme getScheme() {
        return new removeServerNameFromSyncList_resultStandardScheme();
      }
    }

    private static class removeServerNameFromSyncList_resultStandardScheme extends StandardScheme<removeServerNameFromSyncList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeServerNameFromSyncList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeServerNameFromSyncList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeServerNameFromSyncList_resultTupleSchemeFactory implements SchemeFactory {
      public removeServerNameFromSyncList_resultTupleScheme getScheme() {
        return new removeServerNameFromSyncList_resultTupleScheme();
      }
    }

    private static class removeServerNameFromSyncList_resultTupleScheme extends TupleScheme<removeServerNameFromSyncList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeServerNameFromSyncList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeServerNameFromSyncList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getServerNameList_args implements org.apache.thrift.TBase<getServerNameList_args, getServerNameList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getServerNameList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getServerNameList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getServerNameList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getServerNameList_args.class, metaDataMap);
    }

    public getServerNameList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getServerNameList_args(getServerNameList_args other) {
    }

    public getServerNameList_args deepCopy() {
      return new getServerNameList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getServerNameList_args)
        return this.equals((getServerNameList_args)that);
      return false;
    }

    public boolean equals(getServerNameList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getServerNameList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getServerNameList_args typedOther = (getServerNameList_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getServerNameList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getServerNameList_argsStandardSchemeFactory implements SchemeFactory {
      public getServerNameList_argsStandardScheme getScheme() {
        return new getServerNameList_argsStandardScheme();
      }
    }

    private static class getServerNameList_argsStandardScheme extends StandardScheme<getServerNameList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getServerNameList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getServerNameList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getServerNameList_argsTupleSchemeFactory implements SchemeFactory {
      public getServerNameList_argsTupleScheme getScheme() {
        return new getServerNameList_argsTupleScheme();
      }
    }

    private static class getServerNameList_argsTupleScheme extends TupleScheme<getServerNameList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getServerNameList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getServerNameList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getServerNameList_result implements org.apache.thrift.TBase<getServerNameList_result, getServerNameList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getServerNameList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getServerNameList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getServerNameList_resultTupleSchemeFactory());
    }

    public List<ServerName> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServerName.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getServerNameList_result.class, metaDataMap);
    }

    public getServerNameList_result() {
    }

    public getServerNameList_result(
      List<ServerName> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getServerNameList_result(getServerNameList_result other) {
      if (other.isSetSuccess()) {
        List<ServerName> __this__success = new ArrayList<ServerName>();
        for (ServerName other_element : other.success) {
          __this__success.add(new ServerName(other_element));
        }
        this.success = __this__success;
      }
    }

    public getServerNameList_result deepCopy() {
      return new getServerNameList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ServerName> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ServerName elem) {
      if (this.success == null) {
        this.success = new ArrayList<ServerName>();
      }
      this.success.add(elem);
    }

    public List<ServerName> getSuccess() {
      return this.success;
    }

    public getServerNameList_result setSuccess(List<ServerName> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ServerName>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getServerNameList_result)
        return this.equals((getServerNameList_result)that);
      return false;
    }

    public boolean equals(getServerNameList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getServerNameList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getServerNameList_result typedOther = (getServerNameList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getServerNameList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getServerNameList_resultStandardSchemeFactory implements SchemeFactory {
      public getServerNameList_resultStandardScheme getScheme() {
        return new getServerNameList_resultStandardScheme();
      }
    }

    private static class getServerNameList_resultStandardScheme extends StandardScheme<getServerNameList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getServerNameList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                  struct.success = new ArrayList<ServerName>(_list58.size);
                  for (int _i59 = 0; _i59 < _list58.size; ++_i59)
                  {
                    ServerName _elem60; // required
                    _elem60 = new ServerName();
                    _elem60.read(iprot);
                    struct.success.add(_elem60);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getServerNameList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ServerName _iter61 : struct.success)
            {
              _iter61.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getServerNameList_resultTupleSchemeFactory implements SchemeFactory {
      public getServerNameList_resultTupleScheme getScheme() {
        return new getServerNameList_resultTupleScheme();
      }
    }

    private static class getServerNameList_resultTupleScheme extends TupleScheme<getServerNameList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getServerNameList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ServerName _iter62 : struct.success)
            {
              _iter62.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getServerNameList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ServerName>(_list63.size);
            for (int _i64 = 0; _i64 < _list63.size; ++_i64)
            {
              ServerName _elem65; // required
              _elem65 = new ServerName();
              _elem65.read(iprot);
              struct.success.add(_elem65);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
