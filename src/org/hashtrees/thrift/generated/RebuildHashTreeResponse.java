/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.hashtrees.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Response after a hashtree has been rebuilt.
 * 
 * @param sn, server which has executed the rebuild of the tree.
 * @param treeId, which treeId was rebuilt.
 * @param tokenNo, the tokenNo from previous hashtree rebuild request.
 * 
 */
public class RebuildHashTreeResponse implements org.apache.thrift.TBase<RebuildHashTreeResponse, RebuildHashTreeResponse._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RebuildHashTreeResponse");

  private static final org.apache.thrift.protocol.TField SN_FIELD_DESC = new org.apache.thrift.protocol.TField("sn", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TREE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("treeId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TOKEN_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenNo", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RebuildHashTreeResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RebuildHashTreeResponseTupleSchemeFactory());
  }

  public ServerName sn; // required
  public long treeId; // required
  public long tokenNo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SN((short)1, "sn"),
    TREE_ID((short)2, "treeId"),
    TOKEN_NO((short)3, "tokenNo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SN
          return SN;
        case 2: // TREE_ID
          return TREE_ID;
        case 3: // TOKEN_NO
          return TOKEN_NO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TREEID_ISSET_ID = 0;
  private static final int __TOKENNO_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SN, new org.apache.thrift.meta_data.FieldMetaData("sn", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServerName.class)));
    tmpMap.put(_Fields.TREE_ID, new org.apache.thrift.meta_data.FieldMetaData("treeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOKEN_NO, new org.apache.thrift.meta_data.FieldMetaData("tokenNo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RebuildHashTreeResponse.class, metaDataMap);
  }

  public RebuildHashTreeResponse() {
  }

  public RebuildHashTreeResponse(
    ServerName sn,
    long treeId,
    long tokenNo)
  {
    this();
    this.sn = sn;
    this.treeId = treeId;
    setTreeIdIsSet(true);
    this.tokenNo = tokenNo;
    setTokenNoIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RebuildHashTreeResponse(RebuildHashTreeResponse other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetSn()) {
      this.sn = new ServerName(other.sn);
    }
    this.treeId = other.treeId;
    this.tokenNo = other.tokenNo;
  }

  public RebuildHashTreeResponse deepCopy() {
    return new RebuildHashTreeResponse(this);
  }

  @Override
  public void clear() {
    this.sn = null;
    setTreeIdIsSet(false);
    this.treeId = 0;
    setTokenNoIsSet(false);
    this.tokenNo = 0;
  }

  public ServerName getSn() {
    return this.sn;
  }

  public RebuildHashTreeResponse setSn(ServerName sn) {
    this.sn = sn;
    return this;
  }

  public void unsetSn() {
    this.sn = null;
  }

  /** Returns true if field sn is set (has been assigned a value) and false otherwise */
  public boolean isSetSn() {
    return this.sn != null;
  }

  public void setSnIsSet(boolean value) {
    if (!value) {
      this.sn = null;
    }
  }

  public long getTreeId() {
    return this.treeId;
  }

  public RebuildHashTreeResponse setTreeId(long treeId) {
    this.treeId = treeId;
    setTreeIdIsSet(true);
    return this;
  }

  public void unsetTreeId() {
    __isset_bit_vector.clear(__TREEID_ISSET_ID);
  }

  /** Returns true if field treeId is set (has been assigned a value) and false otherwise */
  public boolean isSetTreeId() {
    return __isset_bit_vector.get(__TREEID_ISSET_ID);
  }

  public void setTreeIdIsSet(boolean value) {
    __isset_bit_vector.set(__TREEID_ISSET_ID, value);
  }

  public long getTokenNo() {
    return this.tokenNo;
  }

  public RebuildHashTreeResponse setTokenNo(long tokenNo) {
    this.tokenNo = tokenNo;
    setTokenNoIsSet(true);
    return this;
  }

  public void unsetTokenNo() {
    __isset_bit_vector.clear(__TOKENNO_ISSET_ID);
  }

  /** Returns true if field tokenNo is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenNo() {
    return __isset_bit_vector.get(__TOKENNO_ISSET_ID);
  }

  public void setTokenNoIsSet(boolean value) {
    __isset_bit_vector.set(__TOKENNO_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SN:
      if (value == null) {
        unsetSn();
      } else {
        setSn((ServerName)value);
      }
      break;

    case TREE_ID:
      if (value == null) {
        unsetTreeId();
      } else {
        setTreeId((Long)value);
      }
      break;

    case TOKEN_NO:
      if (value == null) {
        unsetTokenNo();
      } else {
        setTokenNo((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SN:
      return getSn();

    case TREE_ID:
      return Long.valueOf(getTreeId());

    case TOKEN_NO:
      return Long.valueOf(getTokenNo());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SN:
      return isSetSn();
    case TREE_ID:
      return isSetTreeId();
    case TOKEN_NO:
      return isSetTokenNo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RebuildHashTreeResponse)
      return this.equals((RebuildHashTreeResponse)that);
    return false;
  }

  public boolean equals(RebuildHashTreeResponse that) {
    if (that == null)
      return false;

    boolean this_present_sn = true && this.isSetSn();
    boolean that_present_sn = true && that.isSetSn();
    if (this_present_sn || that_present_sn) {
      if (!(this_present_sn && that_present_sn))
        return false;
      if (!this.sn.equals(that.sn))
        return false;
    }

    boolean this_present_treeId = true;
    boolean that_present_treeId = true;
    if (this_present_treeId || that_present_treeId) {
      if (!(this_present_treeId && that_present_treeId))
        return false;
      if (this.treeId != that.treeId)
        return false;
    }

    boolean this_present_tokenNo = true;
    boolean that_present_tokenNo = true;
    if (this_present_tokenNo || that_present_tokenNo) {
      if (!(this_present_tokenNo && that_present_tokenNo))
        return false;
      if (this.tokenNo != that.tokenNo)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(RebuildHashTreeResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RebuildHashTreeResponse typedOther = (RebuildHashTreeResponse)other;

    lastComparison = Boolean.valueOf(isSetSn()).compareTo(typedOther.isSetSn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sn, typedOther.sn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTreeId()).compareTo(typedOther.isSetTreeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTreeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treeId, typedOther.treeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokenNo()).compareTo(typedOther.isSetTokenNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenNo, typedOther.tokenNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RebuildHashTreeResponse(");
    boolean first = true;

    sb.append("sn:");
    if (this.sn == null) {
      sb.append("null");
    } else {
      sb.append(this.sn);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("treeId:");
    sb.append(this.treeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tokenNo:");
    sb.append(this.tokenNo);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sn == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sn' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'treeId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'tokenNo' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RebuildHashTreeResponseStandardSchemeFactory implements SchemeFactory {
    public RebuildHashTreeResponseStandardScheme getScheme() {
      return new RebuildHashTreeResponseStandardScheme();
    }
  }

  private static class RebuildHashTreeResponseStandardScheme extends StandardScheme<RebuildHashTreeResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RebuildHashTreeResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sn = new ServerName();
              struct.sn.read(iprot);
              struct.setSnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TREE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.treeId = iprot.readI64();
              struct.setTreeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOKEN_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tokenNo = iprot.readI64();
              struct.setTokenNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTreeId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'treeId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTokenNo()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tokenNo' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RebuildHashTreeResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sn != null) {
        oprot.writeFieldBegin(SN_FIELD_DESC);
        struct.sn.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TREE_ID_FIELD_DESC);
      oprot.writeI64(struct.treeId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOKEN_NO_FIELD_DESC);
      oprot.writeI64(struct.tokenNo);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RebuildHashTreeResponseTupleSchemeFactory implements SchemeFactory {
    public RebuildHashTreeResponseTupleScheme getScheme() {
      return new RebuildHashTreeResponseTupleScheme();
    }
  }

  private static class RebuildHashTreeResponseTupleScheme extends TupleScheme<RebuildHashTreeResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RebuildHashTreeResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.sn.write(oprot);
      oprot.writeI64(struct.treeId);
      oprot.writeI64(struct.tokenNo);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RebuildHashTreeResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sn = new ServerName();
      struct.sn.read(iprot);
      struct.setSnIsSet(true);
      struct.treeId = iprot.readI64();
      struct.setTreeIdIsSet(true);
      struct.tokenNo = iprot.readI64();
      struct.setTokenNoIsSet(true);
    }
  }

}

